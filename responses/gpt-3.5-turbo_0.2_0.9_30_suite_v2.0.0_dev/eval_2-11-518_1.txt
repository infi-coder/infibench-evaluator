The Rule of 5 is not outdated and is still relevant today. While it is true that implicit constructors and destructors work fine for aggregate data structures, there are cases where user-defined constructors and destructors are necessary.

For example, if a class manages a resource that cannot be managed by a smart pointer, such as a file handle or a network socket, then a user-defined destructor is necessary to properly release that resource. Similarly, if a class has non-copyable or non-movable members, then a user-defined copy constructor, copy assignment operator, move constructor, or move assignment operator may be necessary to properly handle those members.

In addition, there may be cases where a class needs to perform additional actions during construction or destruction that cannot be accomplished with implicit constructors or destructors. For example, a class may need to initialize a member variable based on some external state, or perform some cleanup actions during destruction.

So while it is true that smart pointers can often be used to manage resources, there are still cases where user-defined constructors and destructors are necessary. The Rule of 5 provides a useful guideline for ensuring that a class is properly designed to handle these cases.