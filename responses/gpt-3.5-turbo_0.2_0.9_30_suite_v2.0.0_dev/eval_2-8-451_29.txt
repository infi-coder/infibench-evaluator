Yes, Go modules (formerly known as vgo) also supports a similar approach to what you described. You can use a multi-stage Dockerfile to separate the dependency installation from the actual build process.

Here's an example Dockerfile:

```
# First stage: Install dependencies
FROM golang:1.11-alpine AS build-env
RUN apk add --no-cache git
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download

# Second stage: Build the binary
FROM build-env AS build
COPY . ./
RUN go build -o myapp

# Third stage: Create a minimal image with the binary
FROM alpine
COPY --from=build /app/myapp /usr/local/bin/
CMD ["myapp"]
```

In the first stage, we install the dependencies using `go mod download`. This will download all the dependencies specified in `go.mod` and `go.sum` and cache them in the Docker layer. If the dependencies haven't changed, this layer will be cached and reused in subsequent builds.

In the second stage, we copy the source code and build the binary using `go build`.

In the third stage, we create a minimal image with only the binary and run it.

By using a multi-stage Dockerfile, we can take advantage of Docker's layer caching to speed up the build process.