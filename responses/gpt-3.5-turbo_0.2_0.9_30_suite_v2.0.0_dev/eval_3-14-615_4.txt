Yes, it is possible to get the current scroll position of a SwiftUI ScrollView using the `ScrollViewProxy`. You can use the `contentOffset` method of the `ScrollViewProxy` to get the current scroll position. Here's an example:

```swift
struct ContentView: View {
    @State private var scrollOffset: CGPoint = .zero
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                ForEach(0..<50) { index in
                    Text("Item \(index)")
                        .padding()
                }
            }
            .background(
                GeometryReader { proxy in
                    Color.clear
                        .preference(key: ScrollViewOffsetPreferenceKey.self, value: proxy.contentOffset)
                }
            )
        }
        .onPreferenceChange(ScrollViewOffsetPreferenceKey.self) { value in
            self.scrollOffset = value
        }
    }
}

struct ScrollViewOffsetPreferenceKey: PreferenceKey {
    static var defaultValue: CGPoint = .zero
    static func reduce(value: inout CGPoint, nextValue: () -> CGPoint) {
        value = nextValue()
    }
}
```

In this example, we use a `ScrollViewOffsetPreferenceKey` to get the current scroll position. We add a `GeometryReader` as a background to the `ScrollView` and use the `contentOffset` property of the `ScrollViewProxy` to get the current scroll position. We then use the `onPreferenceChange` modifier to update the `scrollOffset` state variable whenever the scroll position changes.