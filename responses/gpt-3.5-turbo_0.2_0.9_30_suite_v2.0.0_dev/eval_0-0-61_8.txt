To change the background color of the root element dynamically with React, you can use the `ThemeProvider` component provided by Material-UI. 

Here's an example of how you can use it to switch between light and dark themes:

```jsx
import React, { useState } from 'react';
import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';
import CssBaseline from '@material-ui/core/CssBaseline';
import Switch from '@material-ui/core/Switch';

function App() {
  const [darkMode, setDarkMode] = useState(false);

  const theme = createMuiTheme({
    palette: {
      type: darkMode ? 'dark' : 'light',
    },
  });

  const handleThemeChange = () => {
    setDarkMode(!darkMode);
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <div style={{ backgroundColor: theme.palette.background.default }}>
        <Switch checked={darkMode} onChange={handleThemeChange} />
        <h1>Hello World</h1>
      </div>
    </ThemeProvider>
  );
}

export default App;
```

In this example, we use the `createMuiTheme` function to create a theme object with a `palette` property that specifies the type of the theme (either `'light'` or `'dark'`). We then use the `ThemeProvider` component to wrap our app and pass the theme object as a prop.

To change the theme dynamically, we use the `useState` hook to keep track of whether the user has enabled dark mode or not. We then update the theme object by setting the `type` property of the `palette` object to `'dark'` or `'light'` depending on the value of `darkMode`.

Finally, we use the `CssBaseline` component to apply some basic styles to the document, and we set the background color of the root element to the value of `theme.palette.background.default`. We also render a `Switch` component that allows the user to toggle between light and dark mode.