You can use the `numpy.max()` function along with indexing to get the desired output. Here's the code:

```python
import numpy as np

def getMax(matrix):
    # Get the max value of the third column of each 2D array in the 3D array
    max_vals = np.max(matrix[:,:,2], axis=1)
    # Reshape the 1D array to a 2D array with one column
    max_vals = max_vals.reshape(-1, 1)
    return max_vals
```

Here's how it works:

- `np.max(matrix[:,:,2], axis=1)` gets the maximum value of the third column of each 2D array in the 3D array. The `axis=1` argument specifies that we want to get the maximum value along the second axis (i.e., the columns) of each 2D array.
- `max_vals.reshape(-1, 1)` reshapes the resulting 1D array to a 2D array with one column. The `-1` argument specifies that we want numpy to figure out the number of rows based on the size of the input array.

You can call this function with your example array like so:

```python
matrix = np.array([[[4, 1, 5, 2, 5, 5, 7, 8, 9, 7],
                    [7, 4, 2, 4, 7, 8, 4, 1, 3, 5],
                    [6, 1, 2, 1, 1, 1, 2, 3, 7, 6],
                    [5, 5, 5, 0, 5, 4, 3, 8, 7, 1],
                    [2, 8, 6, 7, 4, 7, 5, 5, 5, 1]],
                   
                   [[9, 9, 5, 8, 0, 7, 3, 9, 8, 1],
                    [9, 1, 9, 5, 7, 4, 5, 4, 7, 0],
                    [1, 0, 4, 8, 7, 3, 4, 3