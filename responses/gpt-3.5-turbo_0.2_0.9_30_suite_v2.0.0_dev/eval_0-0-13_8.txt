Yes, you can use an object to store all the values and update them using a single `changeHandler` function. Here's an example:

```javascript
const [allValues, setAllValues] = useState({
   mobile: '',
   username: '',
   email: '',
   password: '',
   confirmPassword: ''
});

const changeHandler = e => {
   const { name, value } = e.target;
   setAllValues(prevState => ({ ...prevState, [name]: value }));
};

return (
   <input type="text"
       className="form-control"
       id="mobile"
       name="mobile"
       placeholder="Enter a valid mobile number"
       value={allValues.mobile}
       onChange={changeHandler}
   />
   // ...
)
```

In the `changeHandler` function, we use destructuring to get the `name` and `value` of the input field that triggered the change event. We then use the spread operator to create a new object that copies all the previous values of `allValues` and updates the value of the input field that changed. Finally, we use `setAllValues` to update the state with the new object.

In the input field, we use the `value` prop to set the value of the input field to the corresponding value in `allValues`, and we pass the `changeHandler` function to the `onChange` prop.