In Rust, you can set a field in a struct with an empty value by using the `Default` trait. The `Default` trait provides a default value for a type, which can be used to initialize fields in a struct.

To use the `Default` trait, you need to derive it for your struct. Here's how you can modify your code to set the `conn` field to a default value:

```rust
#[derive(Default)]
pub struct FistClient {
    addr: String,
    conn: TcpStream,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            ..Default::default()
        }
    }

    pub fn connect(&mut self, ip: &str, port: &str) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = c,
            Err(_) => panic!(),
        }
    }
}
```

In the `new` method, we use the `Default::default()` method to set the `conn` field to its default value. The `..` syntax is used to specify that all other fields should also be set to their default values.