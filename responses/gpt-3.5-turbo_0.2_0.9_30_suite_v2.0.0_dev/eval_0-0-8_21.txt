Sure, here's the implementation of the `findObject` function:

```javascript
function findObject(id, root_node) {
  if (root_node.id === id) {
    return root_node;
  } else {
    for (let i = 0; i < root_node.child.length; i++) {
      const result = findObject(id, root_node.child[i]);
      if (result) {
        return result;
      }
    }
  }
}
```

This function takes two arguments: `id` and `root_node`. `id` is the ID of the object you want to find, and `root_node` is the root node of the nested object tree.

The function first checks if the `id` of the `root_node` matches the `id` we're looking for. If it does, we return the `root_node`.

If the `id` of the `root_node` doesn't match, we loop through all the child nodes of the `root_node` and recursively call the `findObject` function on each child node. If we find the object we're looking for in one of the child nodes, we return that object.

Note that if the object is not found, the function will return `undefined`.