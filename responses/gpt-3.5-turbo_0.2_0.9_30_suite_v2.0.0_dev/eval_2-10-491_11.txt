One way to express this more idiomatically is to use the `Option::filter()` method. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.filter(|&val| val < 5).or(Some(5));
}
```

This code does the same thing as your original code: if `foo` is `Some(val)` and `val < 5`, then `foo` is unchanged; otherwise, `foo` is set to `Some(5)`.

Another way to express this is to use the `Option::map_or_else()` method. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or_else(|| Some(5), |val| if val < 5 { Some(val) } else { None });
}
```

This code does the same thing as the previous example: if `foo` is `Some(val)` and `val < 5`, then `foo` is unchanged; otherwise, `foo` is set to `Some(5)`.

Finally, you can use the `Option::unwrap_or_else()` method to achieve the same result. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = Some(foo.unwrap_or_else(|| 5)).filter(|&val| val < 5);
}
```

This code does the same thing as the previous examples: if `foo` is `Some(val)` and `val < 5`, then `foo` is unchanged; otherwise, `foo` is set to `Some(5)`.