Yes, you can use the `go mod download` command to download all the dependencies specified in your `go.mod` file. This command will download the dependencies to your local cache, which can then be used in subsequent builds.

To take advantage of Docker's layer caching, you can create a separate Docker layer that downloads the dependencies using the `go mod download` command. This layer can then be cached by Docker and reused in subsequent builds as long as your `go.mod` file remains unchanged.

Here's an example Dockerfile that demonstrates this approach:

```
FROM golang:1.11-alpine

WORKDIR /app

# Copy the go.mod and go.sum files to the container
COPY go.mod go.sum ./

# Download the dependencies and cache them in a separate layer
RUN go mod download

# Copy the rest of the application code to the container
COPY . .

# Build the application
RUN go build -o myapp .

# Run the application
CMD ["./myapp"]
```

In this example, the `go.mod` and `go.sum` files are copied to the container first, followed by the `go mod download` command, which downloads the dependencies and caches them in a separate layer. The rest of the application code is then copied to the container, and the application is built using the `go build` command. Finally, the application is run using the `CMD` directive.

By separating the dependency download step into a separate layer, Docker can cache the dependencies and reuse them in subsequent builds, which can significantly speed up the build process.