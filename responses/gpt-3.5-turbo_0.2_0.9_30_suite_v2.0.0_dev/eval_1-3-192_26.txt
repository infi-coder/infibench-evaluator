Here's a possible implementation of the `to_camel_case` function in Python:

```python
def to_camel_case(text):
    if not text:
        return ""
    words = re.split(r"[_-]", text)
    return words[0] + "".join(word.capitalize() for word in words[1:])
```

This function first checks if the input string is empty, and returns an empty string in that case. Then, it splits the string into words using a regular expression that matches either underscores or dashes. Finally, it concatenates the first word with the capitalized versions of the remaining words, and returns the resulting string.

Here's how you can use this function to pass the test cases you provided:

```python
import re

def to_camel_case(text):
    if not text:
        return ""
    words = re.split(r"[_-]", text)
    return words[0] + "".join(word.capitalize() for word in words[1:])

# Test cases
assert to_camel_case('') == ''
assert to_camel_case("the_stealth_warrior") == "theStealthWarrior"
assert to_camel_case("The-Stealth-Warrior") == "TheStealthWarrior"
assert to_camel_case("A-B-C") == "ABC"
```

Note that we need to import the `re` module to use regular expressions.