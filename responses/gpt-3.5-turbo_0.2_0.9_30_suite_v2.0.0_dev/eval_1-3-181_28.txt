You can use NumPy's `max` function along with indexing to achieve this. Here's the code for the `getMax` function:

```python
import numpy as np

def getMax(matrix):
    return np.max(matrix[:,:,2], axis=1).reshape(-1,1)
```

Let's break this down:

- `matrix[:,:,2]` selects the third column of each 2D array in the 3D array.
- `np.max(matrix[:,:,2], axis=1)` finds the maximum value of each row (i.e., the maximum value of the third column) along the second axis (i.e., axis=1).
- `reshape(-1,1)` reshapes the resulting 1D array into a 2D array with one column and as many rows as necessary.

So, for the given input, `getMax(matrix)` returns:

```python
array([[6],
       [9],
       [9]])
```

I hope this helps!