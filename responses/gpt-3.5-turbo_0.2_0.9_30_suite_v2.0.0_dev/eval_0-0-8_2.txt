Sure, here is the implementation of the `findObject` function:

```javascript
function findObject(id, root_node) {
  if (root_node.id === id) {
    return root_node;
  }
  for (let child of root_node.child) {
    let result = findObject(id, child);
    if (result) {
      return result;
    }
  }
}
```

This function takes two arguments: `id` and `root_node`. It recursively searches for the object with the given `id` in the nested object tree starting from the `root_node`. 

The function first checks if the `id` of the `root_node` matches the given `id`. If it does, it returns the `root_node`. Otherwise, it recursively calls itself on each child of the `root_node` until it finds the object with the given `id`. If the object is not found, the function returns `undefined`.

Note that this implementation assumes that the `child` property of each object is an array. If it is not, the function will throw an error.