Here's a possible implementation of the `to_camel_case` function in Python:

```python
def to_camel_case(text):
    if not text:
        return ''
    words = re.split(r'[-_]', text)
    return words[0] + ''.join(word.capitalize() for word in words[1:])
```

This function first checks if the input string is empty, and returns an empty string in that case. Then it splits the string into words using a regular expression that matches either a dash or an underscore. The first word is added to the result as is, while the remaining words are capitalized and concatenated to the result. Note that the `capitalize` method only capitalizes the first letter of a word, leaving the rest unchanged.

Here's how you can use this function to pass the test cases:

```python
import re

def to_camel_case(text):
    if not text:
        return ''
    words = re.split(r'[-_]', text)
    return words[0] + ''.join(word.capitalize() for word in words[1:])

# Test cases
assert to_camel_case('') == ''
assert to_camel_case('the_stealth_warrior') == 'theStealthWarrior'
assert to_camel_case('The-Stealth-Warrior') == 'TheStealthWarrior'
assert to_camel_case('A-B-C') == 'ABC'
```

Note that you need to import the `re` module to use regular expressions.