Here's the revised code for the `pig_latin` function:

```python
def pig_latin(text):
  words = text.split()
  pig_latin_words = []
  for word in words:
    endString = word[1:].lower()
    startString = word[0].upper()
    pig_latin_words.append(endString + startString + 'ay')
  return ' '.join(pig_latin_words)
```

The main changes are:

- Instead of initializing `say` to an empty string, we initialize an empty list `pig_latin_words` to store the pig Latin words.
- We loop through each word in `words`, and for each word, we create the pig Latin version by taking the substring starting from the second character (`endString`), converting the first character to uppercase (`startString`), and appending "ay". We then append the pig Latin word to `pig_latin_words`.
- Finally, we join the pig Latin words in `pig_latin_words` with a space and return the resulting string.

With these changes, the function should now correctly generate pig Latin versions of the input text.