Sure, here's a possible implementation of the `generateRandomString` function in Python:

```python
import random
import string

def generateRandomString():
    # Define the possible characters
    chars = string.ascii_letters + string.digits
    
    # Generate a random string of length 9
    random_string = ''.join(random.choice(chars) for _ in range(9))
    
    # Insert the "NAA3U" substring at a random position
    position = random.randint(0, 12)
    random_string = random_string[:position] + "NAA3U" + random_string[position+5:]
    
    # Generate a random 3-digit number
    random_number = random.randint(100, 999)
    
    # Replace the first occurrence of "000" with the random number
    random_string = random_string.replace("000", str(random_number), 1)
    
    return random_string
```

This function first defines the possible characters as all the letters (lowercase and uppercase) and digits. It then generates a random string of length 9 using the `random.choice` function and a list comprehension.

Next, it inserts the "NAA3U" substring at a random position in the string using the `random.randint` function to generate a random index. It then generates a random 3-digit number using the `random.randint` function again.

Finally, it replaces the first occurrence of "000" in the string with the random number using the `replace` method with the `count` argument set to 1.

Note that this implementation assumes that the "NAA3U" substring and the 3-digit number can appear in any order in the final string. If you need a specific order, you can modify the code accordingly.