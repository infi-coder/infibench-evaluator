You can use the `gin.WrapH` function to wrap the promhttp.Handler() and use it as a middleware in your gin application. Here's an example:

```go
package main

import (
    "log"

    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
    Name: "cpu_temperature_celsius",
    Help: "Current temperature of the CPU.",
})

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    r := gin.Default()

    // Use prometheus middleware
    r.Use(prometheusMiddleware())

    r.GET("/hello", func(c *gin.Context) {
        c.String(200, "Hello, World!")
    })

    log.Fatal(r.Run(":8080"))
}

func prometheusMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        if c.Request.URL.Path == "/metrics" {
            promhttp.Handler().ServeHTTP(c.Writer, c.Request)
            c.Abort()
            return
        }
        c.Next()
    }
}
```

In this example, we create a new gin router and use the `prometheusMiddleware` function as a middleware. The `prometheusMiddleware` function checks if the request path is `/metrics`, and if it is, it serves the metrics using the `promhttp.Handler()`. Otherwise, it calls `c.Next()` to pass the request to the next middleware or route handler.