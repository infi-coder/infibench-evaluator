Yes, you can use an object to store all the values and update them using a single `changeHandler` function. Here's an example:

```javascript
const [allValues, setAllValues] = useState({
  mobile: '',
  username: '',
  email: '',
  password: '',
  confirmPassword: ''
});

const changeHandler = e => {
  const { name, value } = e.target;
  setAllValues(prevState => ({ ...prevState, [name]: value }));
};

return (
  <input
    type="text"
    className="form-control"
    id="mobile"
    name="mobile"
    placeholder="Enter a valid mobile number"
    value={allValues.mobile}
    onChange={changeHandler}
  />
  // ...
);
```

In the `changeHandler` function, we use destructuring to get the `name` and `value` of the input that triggered the change event. We then use the spread operator to create a new object that merges the previous state with the updated value of the input. Finally, we call `setAllValues` with the new object.

Note that we also added the `value` prop to the input to ensure that it reflects the current value in the state.