Yes, you can use the `go mod download` command to download all the dependencies specified in your `go.mod` file. This command will download the dependencies to your local cache, which can be reused across builds.

You can add a separate stage in your Dockerfile to download the dependencies before building your application. Here's an example:

```
# First stage: download dependencies
FROM golang:1.11-alpine AS dependencies

WORKDIR /app

COPY go.mod go.sum ./

RUN go mod download

# Second stage: build application
FROM golang:1.11-alpine AS build

WORKDIR /app

COPY --from=dependencies /go/pkg/mod /go/pkg/mod

COPY . .

RUN go build -o myapp

# Final stage: run application
FROM alpine:latest

COPY --from=build /app/myapp .

CMD ["./myapp"]
```

In this example, the first stage downloads the dependencies using `go mod download` and stores them in `/go/pkg/mod`. The second stage copies the downloaded dependencies from the first stage and builds the application. Finally, the third stage copies the built binary and runs it.

By separating the dependency download stage from the build stage, you can take advantage of Docker's layer caching and speed up your builds.