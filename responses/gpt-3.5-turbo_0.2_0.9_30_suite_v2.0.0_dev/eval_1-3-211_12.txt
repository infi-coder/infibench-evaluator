Yes, we can achieve this using pandas' `groupby` and `cumsum` functions. Here's the `aggregation` function that you can use:

```python
def aggregation(df):
    # Filter the DataFrame to only include rows where type is 'deposit'
    deposit_df = df[df['type'] == 'deposit']
    
    # Group the filtered DataFrame by 'exchange' and forward-fill the 'value' column
    deposit_df['balance'] = deposit_df.groupby('exchange')['value'].cumsum()
    
    # Merge the original DataFrame with the filtered and grouped DataFrame
    df = pd.merge(df, deposit_df[['exchange', 'balance']], on=['exchange'], how='left')
    
    # Fill NaN values in 'balance' column with 0
    df['balance'] = df['balance'].fillna(0)
    
    return df
```

This function first filters the DataFrame to only include rows where `type` is 'deposit'. It then groups this filtered DataFrame by 'exchange' and uses the `cumsum` function to forward-fill the 'value' column and create a new 'balance' column.

The function then merges the original DataFrame with the filtered and grouped DataFrame on the 'exchange' column. Finally, it fills any NaN values in the 'balance' column with 0.

You can call this function with your DataFrame `df` as follows:

```python
df = aggregation(df)
```

This will modify the original DataFrame `df` to include the 'balance' column.