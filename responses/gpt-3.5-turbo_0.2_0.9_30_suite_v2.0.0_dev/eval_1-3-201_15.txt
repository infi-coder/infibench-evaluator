One solution to this problem is to use multiprocessing instead of threading. Multiprocessing allows you to run multiple processes simultaneously, which can be useful for running multiple infinite loops.

Here's an example of how you can use multiprocessing to run both scripts simultaneously:

```python
import multiprocessing as mp

def run_data_mining(database):
    dataMiningScript = fd.financeData(database, 1600)
    while True:
        # Your data mining code here

def run_webpage(database):
    app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
    homepage = hp.homepage(database)
    homepage.timeUpdateCallback(app)
    homepage.gaugeRefreshCallback(app)
    app.layout = homepage.layoutMaker()
    app.run_server(debug=True)

if __name__ == "__main__":
    database = db.dataBase()
    p1 = mp.Process(target=run_data_mining, args=(database,))
    p2 = mp.Process(target=run_webpage, args=(database,))
    p1.start()
    p2.start()
    p1.join()
    p2.join()
```

In this example, we define two functions `run_data_mining` and `run_webpage`, which will run the data mining script and the webpage script, respectively. We then create two `Process` objects, `p1` and `p2`, which will run these functions as separate processes. Finally, we start both processes using the `start()` method, and wait for them to finish using the `join()` method.

Note that we pass the `database` object as an argument to both functions, so that they can share the same database instance.