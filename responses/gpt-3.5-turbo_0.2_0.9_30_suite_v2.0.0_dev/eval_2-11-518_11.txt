The Rule of 5 is not outdated and is still relevant today. While it is true that implicit constructors and destructors work fine for aggregate data structures, there are cases where user-defined constructors and destructors are necessary.

For example, if a class manages a resource that cannot be handled by a smart pointer, such as a file handle or a network connection, then a user-defined destructor is necessary to properly release that resource. Similarly, if a class has non-copyable or non-movable members, then a user-defined copy or move constructor/assignment operator may be necessary to properly handle those members.

While it is true that smart pointers can be used to manage resources, they are not always the best solution. Smart pointers can add overhead and may not be appropriate for certain types of resources. Additionally, using smart pointers does not eliminate the need for proper copy and move constructors/assignment operators.

In summary, while the Rule of 5 may not apply to all classes, it is still an important guideline to follow for classes that manage resources or have non-copyable/non-movable members.