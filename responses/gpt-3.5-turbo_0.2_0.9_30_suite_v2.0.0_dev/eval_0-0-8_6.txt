Sure, here is the implementation of the `findObject` function in JavaScript:

```javascript
function findObject(id, root_node) {
  if (root_node.id === id) {
    return root_node;
  }
  for (let i = 0; i < root_node.child.length; i++) {
    const result = findObject(id, root_node.child[i]);
    if (result) {
      return result;
    }
  }
}
```

This function takes two arguments: `id` and `root_node`. It recursively searches for the object with the given `id` in the nested object tree starting from the `root_node`. 

If the `id` of the `root_node` matches the given `id`, it returns the `root_node`. Otherwise, it iterates over the `child` array of the `root_node` and recursively calls the `findObject` function on each child node. If the `findObject` function returns a non-null value, it means that the object with the given `id` has been found and the function returns that object.

Note that this implementation assumes that the `child` property of each node is an array. If it is not an array, the function will throw an error.