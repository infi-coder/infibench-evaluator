Yes, Go modules (formerly known as vgo) also supports a similar approach to what you described. You can use a multi-stage Dockerfile to separate the dependency installation stage from the build stage.

Here's an example Dockerfile:

```
# First stage: Install dependencies
FROM golang:1.11-alpine AS build-deps
WORKDIR /go/src/myapp
COPY go.mod go.sum ./
RUN go mod download

# Second stage: Build the binary
FROM build-deps AS build
COPY . ./
RUN go build -o /go/bin/myapp

# Third stage: Final image with only the binary
FROM alpine
COPY --from=build /go/bin/myapp /usr/local/bin/
CMD ["myapp"]
```

In the first stage, we use the `golang:1.11-alpine` image to install the dependencies specified in `go.mod` and `go.sum`. This stage is cached separately from the second stage, so if the dependencies haven't changed, this stage can be skipped entirely on subsequent builds.

In the second stage, we copy the entire application code and build the binary using the dependencies installed in the previous stage.

Finally, in the third stage, we copy only the binary from the second stage into a minimal Alpine-based image, resulting in a smaller final image.

Note that this is just one example of how to use multi-stage builds with Go modules. You can adjust this to fit your specific needs.