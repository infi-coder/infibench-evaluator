In Rust, you can set a field in a struct with an empty value by using the `Default` trait. The `Default` trait provides a default value for a type. You can implement the `Default` trait for your struct and set the default value for the `conn` field.

Here's an example implementation of the `Default` trait for your `FistClient` struct:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: TcpStream,
}

impl Default for FistClient {
    fn default() -> Self {
        FistClient {
            addr: String::new(),
            conn: TcpStream::connect("0.0.0.0:0").unwrap(),
        }
    }
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            ..Default::default()
        }
    }

    pub fn connect(&mut self, ip: &str, port: &str) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = c,
            Err(_) => panic!(),
        }
    }
}
```

In this implementation, we have implemented the `Default` trait for the `FistClient` struct. The `default` method sets the default value for the `addr` field to an empty string and the `conn` field to a default value of `TcpStream::connect("0.0.0.0:0").unwrap()`. 

In the `new` method, we set the `addr` field to the provided IP and port and use the `..Default::default()` syntax to set the `conn` field to the default value provided by the `Default` trait implementation.