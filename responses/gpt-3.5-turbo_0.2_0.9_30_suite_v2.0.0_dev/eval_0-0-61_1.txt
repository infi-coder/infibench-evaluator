To change the background color of the root element dynamically with React, you can use the `ThemeProvider` component provided by Material-UI. 

Here's an example of how you can use it to switch between light and dark themes:

```jsx
import React, { useState } from 'react';
import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';
import CssBaseline from '@material-ui/core/CssBaseline';
import Switch from '@material-ui/core/Switch';

function App() {
  const [darkMode, setDarkMode] = useState(false);

  const theme = createMuiTheme({
    palette: {
      type: darkMode ? 'dark' : 'light',
    },
  });

  const handleDarkModeChange = () => {
    setDarkMode(!darkMode);
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <div style={{ backgroundColor: theme.palette.background.default }}>
        <Switch checked={darkMode} onChange={handleDarkModeChange} />
        <h1>Hello World</h1>
        <p>This is a Material-UI themed website</p>
      </div>
    </ThemeProvider>
  );
}

export default App;
```

In this example, we create a `theme` object using the `createMuiTheme` function provided by Material-UI. We set the `palette.type` property to `'dark'` or `'light'` depending on the `darkMode` state. 

We then wrap our app in the `ThemeProvider` component and pass in the `theme` object as a prop. We also include the `CssBaseline` component to apply some basic global styles.

Finally, we use the `backgroundColor` property on the root `div` element to set the background color dynamically based on the `theme.palette.background.default` value.

The `Switch` component is used to toggle the `darkMode` state, which triggers a re-render of the app with the updated theme.