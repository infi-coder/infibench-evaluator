One solution to this problem is to use multiprocessing instead of threading. Multiprocessing allows you to run multiple processes simultaneously, which can be useful when dealing with infinite loops.

Here's an example of how you can use multiprocessing to run both functions simultaneously:

```python
import multiprocessing as mp

def run_data_mining(database):
    dataMiningScript = fd.financeData(database, 1600)
    while True:
        # Your data mining code here
        pass

def run_webpage(database):
    app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])
    homepage = hp.homepage(database)
    homepage.timeUpdateCallback(app)
    homepage.gaugeRefreshCallback(app)
    app.layout = homepage.layoutMaker()
    app.run_server(debug=True)

if __name__ == "__main__":
    database = db.dataBase()
    p1 = mp.Process(target=run_data_mining, args=(database,))
    p2 = mp.Process(target=run_webpage, args=(database,))
    p1.start()
    p2.start()
    p1.join()
    p2.join()
```

In this example, we define two functions `run_data_mining` and `run_webpage`, which will run the data mining script and the webpage respectively. We then create two processes `p1` and `p2`, which will run these functions. Finally, we start both processes and wait for them to finish using `p1.join()` and `p2.join()`.

Note that you will need to pass the `database` object to both functions as an argument.