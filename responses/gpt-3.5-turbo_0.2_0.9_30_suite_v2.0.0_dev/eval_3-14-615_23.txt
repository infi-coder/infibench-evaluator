Yes, you can get the current scroll position of a SwiftUI ScrollView by using the `ScrollViewProxy` and its `contentOffset` property. Here's an example:

```swift
struct ContentView: View {
    @State private var scrollOffset: CGPoint = .zero
    var body: some View {
        ScrollViewReader { proxy in
            ScrollView {
                VStack(spacing: 20) {
                    ForEach(0..<50) { index in
                        Text("Item \(index)")
                            .id(index)
                    }
                }
                .background(GeometryReader {
                    Color.clear.preference(key: ViewOffsetKey.self, value: -$0.frame(in: .global).origin)
                })
                .onPreferenceChange(ViewOffsetKey.self) {
                    self.scrollOffset = $0
                }
            }
            .onAppear {
                // Scroll to a specific item
                proxy.scrollTo(25)
            }
        }
        Text("Current scroll position: \(scrollOffset)")
    }
}

struct ViewOffsetKey: PreferenceKey {
    static var defaultValue: CGPoint { .zero }
    static func reduce(value: inout CGPoint, nextValue: () -> CGPoint) {
        value = nextValue()
    }
}
```

In this example, we use a `PreferenceKey` to get the offset of the ScrollView's content view. We then update the `scrollOffset` state variable whenever the offset changes. Finally, we display the current scroll position using a `Text` view.