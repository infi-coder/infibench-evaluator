Here's the revised code for the `pig_latin` function:

```python
def pig_latin(text):
  words = text.split()
  pig_latin_words = []
  for word in words:
    endString = str(word[1:]).lower()
    startString = str(word[0]).lower()
    pig_latin_word = endString + startString + 'ay'
    pig_latin_words.append(pig_latin_word)
  return ' '.join(pig_latin_words)
```

The changes made to the code are:

- Instead of initializing `say` to an empty string, we initialize an empty list `pig_latin_words` to store the pig Latin words.
- We iterate through each word in `words` using a `for` loop.
- We extract the end of the word (from the second character to the end) and convert it to lowercase using `str(word[1:]).lower()`.
- We extract the first character of the word and convert it to lowercase using `str(word[0]).lower()`.
- We concatenate the end of the word, the first character, and the string 'ay' using `endString + startString + 'ay'` to form the pig Latin word.
- We append the pig Latin word to the `pig_latin_words` list.
- After the loop, we join the elements of `pig_latin_words` using a space separator and return the resulting string.

Now, if you run the test cases, you should get the expected output:

```python
print(pig_latin("hello how are you")) # Should be "ellohay owhay reaay ouyay"
print(pig_latin("programming in python is fun")) # Should be "rogrammingpay niay ythonpay siay unfay"
```