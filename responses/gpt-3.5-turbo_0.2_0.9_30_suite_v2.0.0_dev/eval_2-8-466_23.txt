You can use the `gin.WrapH()` function to wrap the `promhttp.Handler()` and use it as a middleware in your Gin application. Here's an example:

```go
package main

import (
    "log"

    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
    Name: "cpu_temperature_celsius",
    Help: "Current temperature of the CPU.",
})

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new Gin router
    r := gin.Default()

    // Use the promhttp.Handler() as a middleware
    r.Use(gin.WrapH(promhttp.Handler()))

    // Start the server
    if err := r.Run(":8080"); err != nil {
        log.Fatalf("Failed to start server: %v", err)
    }
}
```

This will expose the Prometheus metrics at the `/metrics` endpoint of your Gin application.