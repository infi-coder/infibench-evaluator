Here's the revised code for the `pig_latin` function:

```python
def pig_latin(text):
  words = text.split()
  pig_latin_words = []
  for word in words:
    endString = word[1:].lower()
    startString = word[0].upper()
    pig_latin_words.append(endString + startString + 'ay')
  return ' '.join(pig_latin_words)
```

The main issues with the original code were:

1. The `return` statement was inside the `for` loop, so the function would return the first word after processing it, instead of processing all the words.
2. The `them` variable was not being used correctly to join the strings together.
3. The capitalization of the first letter was not being handled correctly.

The revised code splits the input text into words, processes each word individually, and then joins the pig Latin words back into a single string. The `endString` variable contains the word without the first letter, converted to lowercase. The `startString` variable contains the first letter of the word, converted to uppercase. These two variables are then concatenated with the string 'ay' to form the pig Latin word. Finally, the pig Latin words are joined back into a single string with spaces between them.