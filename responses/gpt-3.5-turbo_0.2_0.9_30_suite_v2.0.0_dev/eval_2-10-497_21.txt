In Rust, a `Box` cannot be null. Instead, you can use an `Option<Box<Node>>` to represent a nullable pointer. Here's an example implementation of a stack using `Option<Box<Node>>`:

```rust
struct Node {
    value: i32,
    next: Option<Box<Node>>,
}

struct Stack {
    top: Option<Box<Node>>,
}

impl Stack {
    fn push(&mut self, value: i32) {
        let new_node = Box::new(Node {
            value: value,
            next: self.top.take(),
        });
        self.top = Some(new_node);
    }

    fn pop(&mut self) -> Option<i32> {
        self.top.take().map(|node| {
            self.top = node.next;
            node.value
        })
    }

    fn is_empty(&self) -> bool {
        self.top.is_none()
    }
}
```

In this implementation, `self.top` is an `Option<Box<Node>>` that is initially set to `None`. When a new value is pushed onto the stack, a new `Box<Node>` is created with the given value and the current `self.top` is moved into the `next` field of the new node. The new node is then set as the new `self.top`.

When a value is popped from the stack, the current `self.top` is taken and its `next` field is moved into `self.top`. The value of the taken node is returned.

The `is_empty` method simply checks if `self.top` is `None`.