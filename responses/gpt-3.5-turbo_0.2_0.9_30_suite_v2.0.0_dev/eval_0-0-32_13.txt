To identify if a div is visible on the viewport, you can use the Intersection Observer API. Here's how you can use it:

1. Install the `react-intersection-observer` package from npm by running `npm install react-intersection-observer`.

2. Import the `IntersectionObserver` component from the package:

```javascript
import { IntersectionObserver } from 'react-intersection-observer';
```

3. Wrap your `div` elements with the `IntersectionObserver` component and pass a callback function to it:

```javascript
<IntersectionObserver onChange={handleIntersection}>
  <div id="parent">
    {data.map(item => (
      <div id={item.id}>{item.title}</div>
    ))}
  </div>
</IntersectionObserver>
```

4. Define the `handleIntersection` function to receive an array of `IntersectionObserverEntry` objects. Loop through the entries and check if the `isIntersecting` property is true. If it is, add the `id` of the element to a list of visible elements:

```javascript
const handleIntersection = entries => {
  const visibleElements = [];
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      visibleElements.push(entry.target.id);
    }
  });
  console.log(visibleElements);
};
```

This will log an array of `id` values of the visible elements on the console whenever the user scrolls and the elements become visible on the viewport.

Note: Make sure to set a height for the `#parent` element, otherwise the `IntersectionObserver` won't work.