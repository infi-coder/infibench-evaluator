Sure, here's the implementation of the `findObject` function in JavaScript:

```javascript
function findObject(id, root_node) {
  if (root_node.id === id) {
    return root_node;
  }
  for (let i = 0; i < root_node.child.length; i++) {
    const result = findObject(id, root_node.child[i]);
    if (result) {
      return result;
    }
  }
}
```

This function takes two parameters: `id` and `root_node`. `id` is the ID of the object we want to find, and `root_node` is the root node of the nested object tree.

The function first checks if the `id` of the `root_node` matches the `id` we're looking for. If it does, it returns the `root_node`.

If the `id` doesn't match, the function recursively calls itself on each child node of the `root_node`. If a child node contains the `id` we're looking for, the function returns that child node.

Note that this implementation assumes that the `child` property of each node is an array. If it's not, the function will throw an error.