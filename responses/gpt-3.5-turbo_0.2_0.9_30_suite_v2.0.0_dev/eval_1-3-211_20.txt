Yes, we can achieve this using pandas' `groupby` and `cumsum` functions. Here's the implementation of the `aggregation` function:

```python
def aggregation(df):
    # Filter the DataFrame to only include rows with type='deposit'
    deposits = df[df['type'] == 'deposit']
    
    # Group the deposits by exchange and forward-fill the values
    deposits['balance'] = deposits.groupby('exchange')['value'].cumsum()
    
    # Merge the balance column back into the original DataFrame
    df = pd.merge(df, deposits[['exchange', 'balance']], on='exchange', how='left')
    
    # Fill the NaN values in the balance column with 0
    df['balance'] = df['balance'].fillna(0)
    
    return df
```

We first filter the DataFrame to only include rows with `type='deposit'`. Then we group these rows by `exchange` and use the `cumsum` function to calculate the cumulative sum of the `value` column. We add this as a new column called `balance`.

Next, we merge the `balance` column back into the original DataFrame using the `exchange` column as the key. We fill the NaN values in the `balance` column with 0.

Finally, we return the modified DataFrame.