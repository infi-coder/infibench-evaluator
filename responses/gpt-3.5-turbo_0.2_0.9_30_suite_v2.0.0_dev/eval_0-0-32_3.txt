To identify if a div is visible on the viewport, you can use the Intersection Observer API. Here's how you can use it:

1. Install the `react-intersection-observer` package from npm:

```
npm install react-intersection-observer
```

2. Import the `IntersectionObserver` component from the package:

```javascript
import { IntersectionObserver } from 'react-intersection-observer';
```

3. Wrap your `div` elements with the `IntersectionObserver` component and pass a callback function to it:

```javascript
<IntersectionObserver onChange={handleIntersection}>
  <div id="parent">
    {data.map(item => (
      <div id={item.id}>{item.title}</div>
    ))}
  </div>
</IntersectionObserver>
```

4. In the callback function, you can check if the `isIntersecting` property of the `entry` object is `true`. If it is, then the element is visible on the viewport:

```javascript
const handleIntersection = (entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      console.log(`Element with ID ${entry.target.id} is visible on the viewport`);
    }
  });
};
```

Note that the `IntersectionObserver` component will only trigger the callback function when the element enters or leaves the viewport, so it's more performant than using the `scroll` event.