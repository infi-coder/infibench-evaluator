To create an index of a property in Mongoose schema using Nest.js, you can use the `@Schema()` decorator to define the schema and then use the `@Index()` decorator to define the index on the property.

Here's an example:

```javascript
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';
import { Index } from '@nestjs/mongoose';

@Schema()
export class MySchema extends Document {
  @Prop()
  _id: string;

  @Prop({ required: true })
  name: string;

  @Prop()
  creationDate: string;

  @Prop()
  @Index({ unique: true })
  type: string;
}

export const MySchema = SchemaFactory.createForClass(MySchema);
```

In the example above, the `@Index()` decorator is used to define an index on the `type` property with the `unique` option set to `true`. This will create a unique index on the `type` property.

You can also define a compound index by passing an array of properties to the `@Index()` decorator. For example, to create a compound index on the `type` and `name` properties, you can do:

```javascript
@Prop()
@Index({ type: 1, name: 1 })
typeAndName: string;
```

This will create a compound index on the `type` and `name` properties.