Yes, it is possible to get the current scroll position of a SwiftUI ScrollView using the `ScrollViewProxy` and `contentOffset` property. Here's an example:

```swift
struct ContentView: View {
    @State private var scrollOffset: CGPoint = .zero
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                ForEach(0..<50) { index in
                    Text("Item \(index)")
                        .frame(width: 200, height: 50)
                }
            }
            .background(
                GeometryReader { proxy in
                    Color.clear
                        .preference(key: ViewOffsetKey.self, value: proxy.frame(in: .named("scroll")).origin)
                }
            )
            .onPreferenceChange(ViewOffsetKey.self) { value in
                self.scrollOffset = value
            }
        }
        .coordinateSpace(name: "scroll")
        .onAppear {
            print("Current scroll offset: \(self.scrollOffset)")
        }
    }
}

struct ViewOffsetKey: PreferenceKey {
    static var defaultValue: CGPoint = .zero
    static func reduce(value: inout CGPoint, nextValue: () -> CGPoint) {
        value = nextValue()
    }
}
```

In this example, we use a `PreferenceKey` to get the offset of the content view inside the `ScrollView`. We then update the `scrollOffset` state variable with the current offset using the `onPreferenceChange` modifier. Finally, we print the initial scroll offset using the `onAppear` modifier.