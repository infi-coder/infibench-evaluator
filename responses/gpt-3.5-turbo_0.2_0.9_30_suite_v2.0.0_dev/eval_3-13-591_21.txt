The reason why the log statement with `itemSelected` value is empty is because the `onItemSelected` method is called asynchronously when the user selects an item from the spinner, and it takes some time to execute. Therefore, the `return` statement is executed before the `onItemSelected` method is called, and the value of `itemSelected` is still empty.

One way to solve this issue is to use a callback function instead of returning a value from the `setupListWithAdapter` function. Here's an example:

```
fun Spinner.setupListWithAdapter(list: MutableList<String>, callback: (String) -> Unit) {
    val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, list)
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
    this.adapter = adapter
    this.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
        override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {
            val itemSelected = list[p2]
            Log.e("categoryLog","1 : " + itemSelected)
            callback(itemSelected)
        }
        override fun onNothingSelected(p0: AdapterView<*>?) {
        }
    }
}
```

In this example, the `setupListWithAdapter` function takes a callback function as a parameter, which is called with the selected item when the user selects an item from the spinner. You can use this function like this:

```
spinner.setupListWithAdapter(list) { selectedItem ->
    // Do something with the selected item
    Log.e("categoryLog","2 : " + selectedItem)
}
```

In this example, the `setupListWithAdapter` function is called with the `list` of items and a lambda function that takes the selected item as a parameter. The lambda function is called with the selected item when the user selects an item from the spinner.