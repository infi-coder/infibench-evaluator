In Rust, a `Box` cannot be null. Instead, you can use an `Option<Box<Node>>` to represent a nullable `Box<Node>`. Here's an example implementation of a stack using `Option<Box<Node>>`:

```rust
struct Node {
    value: i32,
    next: Option<Box<Node>>,
}

struct Stack {
    top: Option<Box<Node>>,
}

impl Stack {
    fn push(&mut self, value: i32) {
        let new_node = Box::new(Node {
            value: value,
            next: self.top.take(),
        });
        self.top = Some(new_node);
    }

    fn pop(&mut self) -> Option<i32> {
        self.top.take().map(|node| {
            self.top = node.next;
            node.value
        })
    }

    fn is_empty(&self) -> bool {
        self.top.is_none()
    }
}
```

In this implementation, `self.top` is an `Option<Box<Node>>` that can be either `Some` with a non-null `Box<Node>` or `None`. The `push` method creates a new `Box<Node>` with the given value and the current `top` as its `next` field. It then sets `self.top` to the new node. The `pop` method takes the current `top` node, sets `self.top` to its `next` field, and returns its value. The `is_empty` method checks if `self.top` is `None`.