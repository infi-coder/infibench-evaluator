The Rule of 5 is not outdated, as there are still cases where user-defined constructors and destructors are necessary. 

For example, if a class manages a resource that cannot be handled by a smart pointer, such as a file handle or a network socket, then a user-defined destructor is necessary to properly release that resource. Similarly, if a class has non-copyable or non-movable members, then a user-defined copy or move constructor/assignment operator may be necessary.

Additionally, there may be cases where the default behavior of the implicit constructors and destructors is not sufficient for a particular class. In these cases, a user-defined constructor or destructor may be necessary to properly initialize or clean up the class.

While it is true that smart pointers can often be used to manage resources and avoid the need for user-defined constructors and destructors, they are not always the best solution. Smart pointers can add overhead and complexity to code, and may not be appropriate for all situations.

In summary, while the Rule of 5 may not apply to all classes, it is still a useful guideline to follow when designing classes that manage resources or have non-copyable/non-movable members.