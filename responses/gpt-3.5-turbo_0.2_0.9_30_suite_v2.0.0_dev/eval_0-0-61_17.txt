To change the background color of the root element dynamically with React, you can use the `ThemeProvider` component provided by Material-UI. 

Here's an example of how you can use it to switch between a light and dark theme:

```jsx
import React, { useState } from 'react';
import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';
import CssBaseline from '@material-ui/core/CssBaseline';
import Switch from '@material-ui/core/Switch';

function App() {
  const [darkMode, setDarkMode] = useState(false);

  const theme = createMuiTheme({
    palette: {
      type: darkMode ? 'dark' : 'light',
    },
  });

  const handleThemeChange = () => {
    setDarkMode(!darkMode);
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <div style={{ backgroundColor: theme.palette.background.default }}>
        <Switch checked={darkMode} onChange={handleThemeChange} />
        <h1>Hello World</h1>
        <p>This is a Material-UI themed app</p>
      </div>
    </ThemeProvider>
  );
}

export default App;
```

In this example, we're using the `createMuiTheme` function to create a theme object that has a `palette` property with a `type` of either `'light'` or `'dark'`, depending on the `darkMode` state. 

We're also using the `CssBaseline` component to apply some basic styles to the page, such as setting the font family and removing margins and paddings.

Finally, we're using the `ThemeProvider` component to wrap our app and pass in the `theme` object we created earlier. We're also setting the background color of the root element to the `theme.palette.background.default` value, which will change dynamically when the theme changes.

Note that we're also using the `Switch` component from Material-UI to allow the user to switch between the light and dark themes. When the user clicks on the switch, we're updating the `darkMode` state, which will trigger a re-render of the app with the new theme.