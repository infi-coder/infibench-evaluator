One way to express this more idiomatically is to use the `Option::filter()` method, which returns `None` if the inner value does not meet the condition, or `Some(inner_value)` otherwise. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = foo.filter(|&val| val < 5) {
        // do something with foo_val
    } else {
        foo.replace(5);
    }
}
```

Another way is to use the `Option::map_or_else()` method, which takes two closures: one to handle the `Some` case, and one to handle the `None` case. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or_else(
        || Some(5),
        |foo_val| if foo_val < 5 { None } else { Some(foo_val) }
    );
}
```

This code replaces `foo` with `Some(5)` if it was `None`, or with `None` if the inner value is less than 5, or with `Some(foo_val)` otherwise.

Finally, you can use the `Option::take()` method to replace the inner value with `None` and return the old value if it meets the condition, or return `None` otherwise. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if foo.take().filter(|&val| val < 5).is_none() {
        foo.replace(5);
    }
}
```

This code replaces `foo` with `None` and returns the old value if it was `Some(foo_val)` and `foo_val < 5`, or returns `None` otherwise.