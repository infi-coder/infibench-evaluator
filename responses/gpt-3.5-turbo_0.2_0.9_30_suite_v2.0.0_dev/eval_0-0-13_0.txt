Yes, you can use an object to store all the values and update them using a single `changeHandler` function. Here's how you can do it:

```javascript
const [allValues, setAllValues] = useState({
   mobile: '',
   username: '',
   email: '',
   password: '',
   confirmPassword: ''
});

const changeHandler = e => {
   const { name, value } = e.target;
   setAllValues(prevState => ({
      ...prevState,
      [name]: value
   }));
};

return (
   <input type="text"
       className="form-control"
       id="mobile"
       name="mobile"
       placeholder="Enter a valid mobile number"
       value={allValues.mobile}
       onChange={changeHandler}
   />
   // ...
)
```

In the `changeHandler` function, we destructure the `name` and `value` properties from the `event.target` object. Then, we use the spread operator to create a copy of the previous state of `allValues` and update the property with the `name` key to the new `value`. Finally, we call `setAllValues` with the updated state.

In the input element, we set the `value` attribute to `allValues.mobile` and the `onChange` attribute to `changeHandler`. We also set the `name` attribute to `mobile` so that the `changeHandler` function knows which property to update in the state object.