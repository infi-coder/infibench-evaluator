The reason why you are seeing the logs in that order is because the `onItemSelected` method is called asynchronously when the user selects an item from the spinner. This means that the `return` statement is executed before the `onItemSelected` method is called, hence the empty string being returned.

To fix this, you can use a callback function to return the selected item instead of returning it directly from the function. Here's an example:

```
fun Spinner.setupListWithAdapter(list: MutableList<String>, callback: (String) -> Unit) {
    val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, list)
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
    this.adapter = adapter
    this.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
        override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {
            val itemSelected = list[p2]
            Log.e("categoryLog","1 : " + itemSelected)
            callback(itemSelected)
        }
        override fun onNothingSelected(p0: AdapterView<*>?) {
        }
    }
    Log.e("categoryLog","2 : ")
}
```

In this modified function, we have replaced the return type with a callback function that takes the selected item as a parameter. The `onItemSelected` method now calls this callback function with the selected item, which can then be used by the calling code.

To use this function, you can pass a lambda expression as the second parameter, like this:

```
spinner.setupListWithAdapter(list) { selectedItem ->
    // Do something with the selected item
}
```

In this example, the `selectedItem` parameter contains the selected item from the spinner, which can be used to perform some action in the calling code.