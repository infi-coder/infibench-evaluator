To create an index of a property in Mongoose schema using Nest.js, you can use the `@Schema()` decorator to define the schema and the `@Prop()` decorator to define the properties of the schema. To create an index on a property, you can pass an object with the `index` property set to `true` as an option to the `@Prop()` decorator.

Here's an example:

```javascript
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

@Schema()
export class MySchema extends Document {
  @Prop({ required: true, index: true })
  type: string;

  @Prop()
  creationDate: string;

  @Prop()
  name: string;
}

export const MySchema = SchemaFactory.createForClass(MySchema);
```

In this example, an index is created on the `type` property by passing `{ index: true }` as an option to the `@Prop()` decorator.

You can also create an index on multiple properties by passing an object with the property names as keys and the index direction (1 for ascending, -1 for descending) as values to the `index()` method of the schema:

```javascript
export const MySchema = SchemaFactory.createForClass(MySchema).index({ type: 1, creationDate: -1 });
```

This creates a compound index on the `type` and `creationDate` properties, with `type` sorted in ascending order and `creationDate` sorted in descending order.