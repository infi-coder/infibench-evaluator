The Rule of 5 is not outdated and is still relevant today. While it is true that implicit constructors and destructors work fine for aggregate data structures, there are cases where user-defined constructors and destructors are necessary.

For example, if a class manages a resource that cannot be handled by a smart pointer, such as a file handle or a network connection, then a user-defined destructor is necessary to properly release that resource. Similarly, if a class has non-copyable or non-movable members, then a user-defined copy constructor, copy assignment constructor, move constructor, or move assignment constructor may be necessary to properly manage those members.

In addition, there may be cases where a user-defined constructor or destructor is necessary to perform additional initialization or cleanup beyond what can be done with implicit constructors and destructors.

So while it is true that smart pointers can be used to manage resources, there are still cases where user-defined constructors and destructors are necessary. The Rule of 5 provides a guideline for ensuring that a class is properly managing its resources and can be useful in avoiding common mistakes.