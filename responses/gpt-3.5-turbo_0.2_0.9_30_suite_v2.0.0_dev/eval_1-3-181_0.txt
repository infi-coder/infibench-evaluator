Here's a possible implementation of the `getMax` function:

```python
import numpy as np

def getMax(matrix):
    # Get the maximum value of the third column for each "layer" of the 3D array
    max_values = np.max(matrix[:,:,2], axis=1)
    # Reshape the 1D array into a 2D array with one column
    result = max_values.reshape(-1, 1)
    return result
```

This function first uses NumPy's `max` function to get the maximum value of the third column for each "layer" of the 3D array. The `axis=1` argument specifies that we want to take the maximum along the second axis (i.e., the columns) of each "layer". This gives us a 1D array with the maximum values.

We then use NumPy's `reshape` function to reshape the 1D array into a 2D array with one column. The `-1` argument for the first dimension means that we want NumPy to figure out the appropriate size based on the size of the input array and the size of the second dimension (which is 1 in this case).

Finally, we return the resulting 2D array.