You can create a factory class that creates and returns instances of `ServiceBusSender` based on the queue name. Here's an example:

```c#
public class ServiceBusSenderFactory
{
    private readonly string _connectionString;
    private readonly ServiceBusClientOptions _clientOptions;

    public ServiceBusSenderFactory(string connectionString, ServiceBusClientOptions clientOptions)
    {
        _connectionString = connectionString;
        _clientOptions = clientOptions;
    }

    public ServiceBusSender CreateSender(string queueName)
    {
        var client = new ServiceBusClient(_connectionString, _clientOptions);
        return client.CreateSender(queueName);
    }
}
```

Then, you can register this factory in your DI container:

```c#
_services.AddSingleton<ServiceBusSenderFactory>(implementationFactory =>
{
    var serviceBusConfiguration = implementationFactory.GetRequiredService<IOptions<UserEventConsumerSetting>>().Value;

    return new ServiceBusSenderFactory(serviceBusConfiguration.ServiceBusConnectionString, new ServiceBusClientOptions
    {
        TransportType = ServiceBusTransportType.AmqpWebSockets
    });
});
```

Finally, you can inject the factory into your `CarReservationMessagingService` and use it to create the `ServiceBusSender` instances:

```c#
public class CarReservationMessagingService
{
    private readonly ServiceBusSenderFactory _senderFactory;

    public CarReservationMessagingService(ServiceBusSenderFactory senderFactory)
    {
        _senderFactory = senderFactory ?? throw new ArgumentNullException(nameof(senderFactory));
    }

    public async Task PublishNewCarReservationMessageAsync(CarReservation carReservation)
    {
        var carReservationIntegrationMessage = new CarReservationIntegrationMessage
        {
            Id = Guid.NewGuid().ToString(),
            CarId = carReservation.CarId,
            CustomerId = carReservation.CustomerId,
            RentFrom = carReservation.RentFrom,
            RentTo = carReservation.RentTo
        };

        var serializedMessage = JsonSerializer.Serialize(carReservationIntegrationMessage);
        ServiceBusMessage message = new ServiceBusMessage(serializedMessage);

        var sender = _senderFactory.CreateSender("queueName");
        await sender.SendMessageAsync(message);
    }
}
```

Note that you should replace `"queueName"` with the actual name of the queue you want to send the message to.