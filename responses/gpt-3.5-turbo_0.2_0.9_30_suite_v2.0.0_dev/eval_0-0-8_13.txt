Sure, here is the implementation of the `findObject` function:

```javascript
function findObject(id, root_node) {
  if (root_node.id === id) {
    return root_node;
  }
  for (let i = 0; i < root_node.child.length; i++) {
    const result = findObject(id, root_node.child[i]);
    if (result) {
      return result;
    }
  }
}
```

This function takes two arguments: `id` and `root_node`. It recursively searches the nested object tree starting from the `root_node` and returns the object with the matching `id` value.

The function first checks if the `id` of the `root_node` matches the given `id`. If it does, it returns the `root_node`.

If the `id` of the `root_node` does not match the given `id`, the function recursively calls itself on each child node of the `root_node`. If a child node contains the matching `id`, the function returns that child node.

Note that this implementation assumes that the `id` values are unique within the nested object tree.