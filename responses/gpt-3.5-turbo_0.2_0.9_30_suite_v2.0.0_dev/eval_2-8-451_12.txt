Yes, you can use the `go mod download` command to download all the dependencies specified in your `go.mod` file without building your application. This can be useful for caching dependencies in a Docker image layer, as you mentioned.

Here's an example Dockerfile that uses `go mod download` to cache dependencies in a separate layer:

```
FROM golang:1.11-alpine AS builder

WORKDIR /app

# Copy the go.mod and go.sum files to the container
COPY go.mod go.sum ./

# Download the dependencies
RUN go mod download

# Copy the rest of the application code to the container
COPY . .

# Build the application
RUN go build -o myapp

# Final image
FROM alpine:latest

WORKDIR /app

# Copy the binary from the builder container
COPY --from=builder /app/myapp .

# Run the binary
CMD ["./myapp"]
```

In this example, the `go mod download` command is run in a separate `builder` stage, which allows Docker to cache the downloaded dependencies in a separate layer. This means that if you make changes to your application code and rebuild the image, Docker will only need to rebuild the `builder` stage if the dependencies haven't changed, which can greatly speed up the build process.