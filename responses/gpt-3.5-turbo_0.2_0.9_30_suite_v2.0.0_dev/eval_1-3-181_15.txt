You can use the `numpy.max()` function along with the appropriate axis parameter to get the maximum value of each column in the third dimension of the input array. Then, you can reshape the resulting 1D array to a 2D array with one column and as many rows as there are columns in the third dimension of the input array.

Here's the implementation of the `getMax()` function:

```python
import numpy as np

def getMax(matrix):
    max_values = np.max(matrix[:,:,2], axis=0)
    return max_values.reshape(-1, 1)
```

Here, `matrix[:,:,2]` selects the third column of each 2D subarray in the input 3D array. The `axis=0` parameter in `np.max()` specifies that we want to get the maximum value of each column. The resulting 1D array is then reshaped to a 2D array with one column and as many rows as there are columns in the third dimension of the input array using `reshape(-1, 1)`.

You can call this function with your input array like so:

```python
matrix = np.array([[[4, 1, 5, 2, 5, 5, 7, 8, 9, 7],
                   [7, 4, 2, 4, 7, 8, 4, 1, 3, 5],
                   [6, 1, 2, 1, 1, 1, 2, 3, 7, 6],
                   [5, 5, 5, 0, 5, 4, 3, 8, 7, 1],
                   [2, 8, 6, 7, 4, 7, 5, 5, 5, 1]],
                  
                  [[9, 9, 5, 8, 0, 7, 3, 9, 8, 1],
                   [9, 1, 9, 5, 7, 4, 5, 4, 7, 0],
                   [1, 0, 4, 8, 7, 3, 4, 3, 8, 8],
                   [8, 1, 3, 1, 7