The issue with your code is that you are trying to format a `LocalDate` object as a date-time string, which is not possible. You need to use a `LocalDateTime` object instead, which contains both date and time information.

Here is an updated version of your code that generates a random `LocalDateTime` object and formats it in the desired format:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minus(Duration.ofDays((new Random().nextInt(365 * 70))))
                .withHour(new Random().nextInt(24))
                .withMinute(new Random().nextInt(60))
                .withSecond(new Random().nextInt(60));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.format(formatter);
    }
}
```

This code generates a random `LocalDateTime` object by subtracting a random number of days from the current date and time, and then setting random values for the hour, minute, and second. It then formats the `LocalDateTime` object using a `DateTimeFormatter` object with the desired format.

The output should look something like this:

```
date and time :: 1952-11-06T21:45:13.123
1952-11-06T21:45:13Z
```

Note that the `Z` at the end of the formatted string indicates that the time is in UTC. If you want to use a different time zone, you can use the `withZone()` method of the `ZonedDateTime` class to convert the `LocalDateTime` object to a `ZonedDateTime` object with the desired time zone, and then format that object instead.