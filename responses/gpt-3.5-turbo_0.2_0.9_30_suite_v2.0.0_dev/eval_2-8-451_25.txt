Yes, you can use the `go mod download` command to download all the dependencies specified in your `go.mod` file. This command will download the dependencies to your local cache, which can then be used by subsequent builds.

To take advantage of Docker's layer caching, you can add a separate stage to your Dockerfile that downloads the dependencies using `go mod download`. Here's an example:

```
# Build stage
FROM golang:1.11 AS build
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY . .
RUN go build -o myapp

# Final stage
FROM scratch
COPY --from=build /app/myapp /myapp
ENTRYPOINT ["/myapp"]
```

In this example, the first stage downloads the dependencies using `go mod download`, and then copies the source code and builds the binary. The second stage uses the `scratch` image as the base image, and copies the binary from the first stage. Since the dependencies were downloaded in the first stage, they don't need to be downloaded again in the second stage, which takes advantage of Docker's layer caching.