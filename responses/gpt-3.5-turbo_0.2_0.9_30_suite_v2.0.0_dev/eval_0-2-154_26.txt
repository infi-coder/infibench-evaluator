Sure, here's an implementation of the `iterLeafNodes` function that should do what you need:

```javascript
function* iterLeafNodes(strhtml, format=[]) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(strhtml, "text/html");
  const walker = doc.createTreeWalker(doc.body, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, null, false);
  let node;
  while (node = walker.nextNode()) {
    if (node.nodeType === Node.TEXT_NODE) {
      yield { text: node.textContent, format };
    } else {
      const newFormat = [...format];
      if (node.tagName === "STRONG" || node.tagName === "EM") {
        newFormat.push(node.tagName.toLowerCase());
      }
      yield* iterLeafNodes(node.innerHTML, newFormat);
    }
  }
}
```

You can use it like this:

```javascript
const strHTML = "<p>Hello World</p><p>I am a text with <strong>bold</strong> word</p><p><strong>I am bold text with nested <em>italic</em> Word.</strong></p>";
const result = [...iterLeafNodes(strHTML)];
console.log(result);
```

This should output the following:

```javascript
[
  { text: "Hello World", format: [] },
  { text: "I am a text with", format: [] },
  { text: "bold", format: ["strong"] },
  { text: " word", format: [] },
  { text: "I am bold text with nested", format: ["strong"] },
  { text: "italic", format: ["strong", "em"] },
  { text: "Word.", format: ["strong"] }
]
```