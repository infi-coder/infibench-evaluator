You can use the `getvalue()` method of the `_io.BytesIO` object to get a bytes-like object. Here's an updated version of your function that should work:

```python
import zlib
import base64

def uncompress_body(compression_type, body):
    if compression_type == 'gzip' or compression_type == 'compress':
        return zlib.decompress(body)
    elif compression_type == 'deflate':
        compressor = zlib.compressobj(9, zlib.DEFLATED, -zlib.MAX_WBITS)
        compressed = compressor.compress(body)
        compressed += compressor.flush()
        return base64.b64encode(compressed).decode('utf-8')

    return body

# Example usage
import requests

response = requests.get('https://www.example.com')
compression_type = response.headers.get('content-encoding')
body = response.content

if compression_type:
    body = uncompress_body(compression_type, body)

print(body)
```

Note that I added a `.decode('utf-8')` to the `base64.b64encode()` call in the `deflate` case, since `base64.b64encode()` returns a bytes object and you probably want a string.