One way to express this more idiomatically is to use the `filter()` method on `Option` to check the condition and then use `unwrap_or_else()` to provide a default value if the `Option` is `None` or the inner value does not meet the condition. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.filter(|&val| val < 5).unwrap_or_else(|| Some(5));
}
```

Another way is to use the `map_or()` method to provide a default value if the `Option` is `None` and then use `filter()` to check the condition. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or(Some(5), |val| val.filter(|&val| val < 5));
}
```

You can also use the `and_then()` method to check the condition and provide a default value if the condition is not met. Here's an example:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.and_then(|val| if val < 5 { Some(val) } else { None }).or(Some(5));
}
```

All of these approaches achieve the same result as the original code, but they are more concise and idiomatic.