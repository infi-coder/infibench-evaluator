Yes, you can use an object to store all the values and update them using a single `changeHandler` function. Here's an example of how you can do it:

```javascript
const [allValues, setAllValues] = useState({
  mobile: '',
  username: '',
  email: '',
  password: '',
  confirmPassword: ''
});

const changeHandler = e => {
  const { name, value } = e.target;
  setAllValues(prevState => ({
    ...prevState,
    [name]: value
  }));
};

return (
  <input
    type="text"
    className="form-control"
    id="mobile"
    name="mobile"
    placeholder="Enter a valid mobile number"
    value={allValues.mobile}
    onChange={changeHandler}
  />
  // ...
);
```

In the `changeHandler` function, we destructure the `name` and `value` properties from the `event.target` object. Then, we use the spread operator to create a copy of the previous state of `allValues` and update the property with the same name as the `name` variable with the new `value`. Finally, we pass the updated `allValues` object to the `setAllValues` function to update the state.

Note that we also added the `value` property to the `input` element to ensure that it displays the correct value from the `allValues` object.