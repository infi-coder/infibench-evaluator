In Rust, you can set a field in a struct with an empty value by using the `Default` trait. The `Default` trait provides a default value for a type, which can be used to initialize fields in a struct.

To use the `Default` trait, you need to implement it for your struct and then use the `default()` method to get the default value for the `TcpStream` type. Here's how you can modify your code to set the `conn` field to the default value:

```rust
pub struct FistClient {
    addr: String,
    conn: TcpStream,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: TcpStream::default(),
        }
    }

    pub fn connect(&mut self, ip: &str, port: &str) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = c,
            Err(_) => panic!(),
        }
    }
}
```

In this code, we have implemented the `Default` trait for the `TcpStream` type by using the `#[derive(Default)]` attribute. This allows us to use the `default()` method to get the default value for the `TcpStream` type, which we then use to initialize the `conn` field in the `new` method.