Yes, you can get the current scroll position of a SwiftUI ScrollView by using the `ScrollViewProxy` and its `contentOffset` property. Here's an example:

```
struct ContentView: View {
    @State private var scrollOffset: CGPoint = .zero
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                ForEach(0..<50) { index in
                    Text("Item \(index)")
                        .frame(width: 200, height: 50)
                }
            }
            .background(
                GeometryReader { proxy in
                    Color.clear
                        .preference(key: ScrollViewOffsetPreferenceKey.self, value: proxy.contentOffset)
                }
            )
        }
        .onPreferenceChange(ScrollViewOffsetPreferenceKey.self) { value in
            self.scrollOffset = value
        }
        .overlay(
            Text("Current scroll offset: \(scrollOffset)")
                .padding()
                .background(Color.white.opacity(0.8))
                .cornerRadius(10)
                .padding(10)
                .opacity(scrollOffset != .zero ? 1 : 0)
                .animation(.easeInOut)
        )
    }
}

struct ScrollViewOffsetPreferenceKey: PreferenceKey {
    static var defaultValue: CGPoint = .zero
    static func reduce(value: inout CGPoint, nextValue: () -> CGPoint) {
        value = nextValue()
    }
}
```

In this example, we're using a `ScrollView` with a `VStack` of `Text` views as its content. We're also adding a `GeometryReader` as a background to the content view, which allows us to read the `contentOffset` of the `ScrollViewProxy`. We're then using a `PreferenceKey` to store the `contentOffset` value and update the `scrollOffset` state variable whenever it changes. Finally, we're overlaying a `Text` view that displays the current scroll offset, which is only visible when the `scrollOffset` is not `.zero`.