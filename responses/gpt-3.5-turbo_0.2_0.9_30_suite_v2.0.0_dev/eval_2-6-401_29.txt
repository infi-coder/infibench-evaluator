You can create a factory method that creates and returns a `ServiceBusSender` instance for a given queue name. Then, you can register this factory method as a singleton service in the DI container. Here's an example:

```c#
// Define a factory method that creates a ServiceBusSender instance for a given queue name
private ServiceBusSender CreateServiceBusSender(string queueName)
{
    var serviceBusConfiguration = _configuration.GetSection("ServiceBus").Get<ServiceBusConfiguration>();

    var serviceBusClient = new ServiceBusClient(serviceBusConfiguration.ConnectionString, new ServiceBusClientOptions
    {
        TransportType = ServiceBusTransportType.AmqpWebSockets
    });

    return serviceBusClient.CreateSender(queueName);
}

// Register the factory method as a singleton service for each queue name
_services.AddSingleton(provider => CreateServiceBusSender("queue1"));
_services.AddSingleton(provider => CreateServiceBusSender("queue2"));
```

Now, you can inject the `ServiceBusSender` instances into your services and use them as needed:

```c#
public class MyService
{
    private readonly ServiceBusSender _queue1Sender;
    private readonly ServiceBusSender _queue2Sender;

    public MyService(ServiceBusSender queue1Sender, ServiceBusSender queue2Sender)
    {
        _queue1Sender = queue1Sender;
        _queue2Sender = queue2Sender;
    }

    public async Task SendMessageToQueue1Async(string message)
    {
        var serviceBusMessage = new ServiceBusMessage(message);
        await _queue1Sender.SendMessageAsync(serviceBusMessage);
    }

    public async Task SendMessageToQueue2Async(string message)
    {
        var serviceBusMessage = new ServiceBusMessage(message);
        await _queue2Sender.SendMessageAsync(serviceBusMessage);
    }
}
```