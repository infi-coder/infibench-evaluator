In Rust, you can set a field in a struct with an empty value by using the `Default` trait. The `Default` trait provides a default value for a type, which can be used to initialize the field. 

To use the `Default` trait, you need to derive it for your struct and then use the `default()` method to get the default value. Here's how you can modify your code to set the `conn` field to a default value:

```rust
pub struct FistClient {
    addr: String,
    conn: TcpStream,
}

impl Default for FistClient {
    fn default() -> Self {
        FistClient {
            addr: String::new(),
            conn: TcpStream::default(),
        }
    }
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            ..Default::default()
        }
    }

    pub fn connect(&mut self, ip: &str, port: &str) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = c,
            Err(_) => panic!(),
        }
    }
}
```

In this code, we have derived the `Default` trait for the `FistClient` struct and implemented the `default()` method to return a default value for the struct. We have set the `addr` field to an empty string and the `conn` field to the default value of `TcpStream`. 

In the `new()` method, we have used the `..Default::default()` syntax to set all the fields to their default values, including the `conn` field.