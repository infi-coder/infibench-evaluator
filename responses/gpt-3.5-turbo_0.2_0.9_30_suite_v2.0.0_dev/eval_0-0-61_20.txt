To change the background color of the root element dynamically with React, you can use the `ThemeProvider` component provided by Material-UI. 

Here's an example of how you can use it to switch between light and dark themes:

```jsx
import React, { useState } from 'react';
import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';
import CssBaseline from '@material-ui/core/CssBaseline';
import Switch from '@material-ui/core/Switch';

function App() {
  const [darkMode, setDarkMode] = useState(false);

  const theme = createMuiTheme({
    palette: {
      type: darkMode ? 'dark' : 'light',
    },
  });

  const handleDarkModeChange = () => {
    setDarkMode(!darkMode);
  };

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <div style={{ backgroundColor: theme.palette.background.default }}>
        <Switch checked={darkMode} onChange={handleDarkModeChange} />
        <h1>Hello, world!</h1>
        <p>This is a Material-UI app.</p>
      </div>
    </ThemeProvider>
  );
}

export default App;
```

In this example, the `ThemeProvider` component is used to wrap the entire app. The `createMuiTheme` function is used to create a theme object with a `palette` property that specifies the type of palette to use (`light` or `dark`) based on the `darkMode` state. The `CssBaseline` component is used to apply some basic global styles to the app, such as resetting the default margin and padding of the `body` element.

The background color of the root element is set dynamically by passing the `theme.palette.background.default` value as the `backgroundColor` style property of the `div` element that wraps the app content.

Finally, a `Switch` component is used to toggle the `darkMode` state, which triggers a re-render of the app with the new theme.