You can use the `numpy.max()` function with the `axis` parameter set to 1 and the `keepdims` parameter set to True to get the maximum value of each row. Then, you can use indexing to get the third column of each row and reshape the resulting 1D array into a 2D array with a single column.

Here's the code for the `getMax()` function:

```python
import numpy as np

def getMax(matrix):
    max_values = np.max(matrix, axis=1, keepdims=True)
    third_column = max_values[:, 2]
    result = third_column.reshape(-1, 1)
    return result
```

You can test the function with the example array you provided:

```python
matrix = np.array([[[4, 1, 5, 2, 5, 5, 7, 8, 9, 7],
                   [7, 4, 2, 4, 7, 8, 4, 1, 3, 5],
                   [6, 1, 2, 1, 1, 1, 2, 3, 7, 6],
                   [5, 5, 5, 0, 5, 4, 3, 8, 7, 1],
                   [2, 8, 6, 7, 4, 7, 5, 5, 5, 1]],
                  
                  [[9, 9, 5, 8, 0, 7, 3, 9, 8, 1],
                   [9, 1, 9, 5, 7, 4, 5, 4, 7, 0],
                   [1, 0, 4, 8, 7, 3, 4, 3, 8, 8],
                   [8, 1, 3, 1, 7, 0, 9, 9, 3, 8],
                   [4, 0, 2, 3, 8, 2, 0, 1, 2, 4]],
                  
                  [[1, 6, 2, 4, 4, 0, 2, 3, 0, 3