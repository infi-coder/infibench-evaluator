Sure! Here's the implementation of the `findObject` function:

```javascript
function findObject(id, root_node) {
  if (root_node.id === id) {
    return root_node;
  } else {
    for (let i = 0; i < root_node.child.length; i++) {
      const result = findObject(id, root_node.child[i]);
      if (result) {
        return result;
      }
    }
  }
}
```

This function takes two arguments: `id` and `root_node`. `id` is the value we're searching for, and `root_node` is the root node of the JSON nested object tree.

The function first checks if the `id` of the `root_node` matches the `id` we're searching for. If it does, it returns the `root_node`.

If the `id` of the `root_node` doesn't match, the function loops through all the child nodes of the `root_node` and recursively calls itself with each child node as the new `root_node`. If a child node contains the `id` we're searching for, the function returns that child node.

Note that the function assumes that the `child` property of each node is an array. If it's not, the function will throw an error.