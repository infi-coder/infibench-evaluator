Yes, you can use the `go mod download` command to download the dependencies specified in your `go.mod` file. This command downloads the modules to the local module cache, which is located in `$GOPATH/pkg/mod`. 

You can add this command as a separate stage in your Dockerfile to take advantage of Docker's layer caching. Here's an example:

```
# Stage 1: Download dependencies
FROM golang:1.11-alpine AS build
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download

# Stage 2: Build binary
FROM build AS compile
COPY . .
RUN go build -o myapp

# Stage 3: Create final image
FROM alpine
COPY --from=compile /app/myapp /usr/local/bin/
CMD ["myapp"]
```

In this example, the first stage downloads the dependencies using `go mod download`, and the second stage builds the binary using `go build`. The final stage copies the binary from the second stage and creates the final image.

By separating the dependency download stage from the build stage, you can take advantage of Docker's layer caching and speed up rebuilds.