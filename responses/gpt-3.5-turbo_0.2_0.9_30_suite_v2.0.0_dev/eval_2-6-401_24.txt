You can create a factory method that creates and returns a `ServiceBusSender` instance for a given queue name. Then, you can register this factory method as a singleton service in the dependency injection container. Finally, you can inject the `Func<string, ServiceBusSender>` delegate into your `CarReservationMessagingService` class and use it to create `ServiceBusSender` instances for different queue names.

Here's an example implementation:

1. Create a factory method that creates and returns a `ServiceBusSender` instance for a given queue name:

```c#
private ServiceBusSender CreateServiceBusSender(string queueName)
{
    var serviceBusConfiguration = _options.Value;

    var serviceBusClient = new ServiceBusClient(serviceBusConfiguration.ServiceBusConnectionString, new ServiceBusClientOptions
    {
        TransportType = ServiceBusTransportType.AmqpWebSockets
    });

    return serviceBusClient.CreateSender(queueName);
}
```

2. Register the factory method as a singleton service in the dependency injection container:

```c#
_services.AddSingleton<Func<string, ServiceBusSender>>(implementationFactory =>
{
    return queueName => implementationFactory.GetService<ServiceBusSenderFactory>().CreateServiceBusSender(queueName);
});

_services.AddSingleton<ServiceBusSenderFactory>();
```

3. Inject the `Func<string, ServiceBusSender>` delegate into your `CarReservationMessagingService` class and use it to create `ServiceBusSender` instances for different queue names:

```c#
private readonly Func<string, ServiceBusSender> _serviceBusSenderFactory;

public CarReservationMessagingService(Func<string, ServiceBusSender> serviceBusSenderFactory)
{
    _serviceBusSenderFactory = serviceBusSenderFactory ?? throw new ArgumentNullException(nameof(serviceBusSenderFactory));
}

public async Task PublishNewCarReservationMessageAsync(CarReservation carReservation, string queueName)
{
    var carReservationIntegrationMessage = new CarReservationIntegrationMessage
    {
        Id = Guid.NewGuid().ToString(),
        CarId = carReservation.CarId,
        CustomerId = carReservation.CustomerId,
        RentFrom = carReservation.RentFrom,
        RentTo = carReservation.RentTo
    };

    var serializedMessage = JsonSerializer.Serialize(carReservationIntegrationMessage);
    ServiceBusMessage message = new ServiceBusMessage(serializedMessage);

    var serviceBusSender = _serviceBusSenderFactory(queueName);
    await serviceBusSender.SendMessageAsync(message);
}
```

Note that you need to pass the queue name as a parameter to the `Publish