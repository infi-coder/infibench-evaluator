You can use the `iter()` method to create an iterator over the vector, and then use the `min()` method to find the minimum value. Here is how you can do it:

```rust
let v = vec![5, 6, 8, 4, 2, 7];
let min = v.iter().min();

match min {
    Some(min) => println!("The minimum value is {}", min),
    None => println!("The vector is empty"),
}
```

In this code, `v.iter().min()` returns an `Option<&i32>`. If the vector is empty, `min()` returns `None`. Otherwise, it returns `Some(&i32)`, where `&i32` is a reference to the minimum value.

The `match` statement is used to handle both possibilities. If `min()` returns `Some(min)`, it prints the minimum value. If `min()` returns `None`, it prints "The vector is empty".