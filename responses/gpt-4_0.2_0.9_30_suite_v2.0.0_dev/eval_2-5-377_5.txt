The problem you're facing is because you're trying to format a `LocalDate` object using `SimpleDateFormat` which is meant for `java.util.Date` objects. 

To solve this, you should use `java.time` package's `DateTimeFormatter` instead of `SimpleDateFormat`. Also, you're generating a `LocalDate` which doesn't contain time information. You should use `LocalDateTime` instead.

Here is the corrected code:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays((new Random().nextInt(365 * 70)));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.format(formatter);
    }
}
```

Please note that the `'Z'` in the format string stands for Zulu time or UTC. If you want to convert the time to UTC before formatting, you can do so by converting the `LocalDateTime` to a `ZonedDateTime`:

```java
public static String formatDate(LocalDateTime dateTime){
    ZonedDateTime utc = dateTime.atZone(ZoneId.systemDefault()).withZoneSameInstant(ZoneId.of("UTC"));
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
    return utc.format(formatter);
}
```

This will convert the date and time to UTC before formatting it.