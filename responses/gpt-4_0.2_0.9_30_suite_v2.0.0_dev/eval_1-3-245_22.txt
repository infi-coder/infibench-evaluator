Your Dockerfile seems to be correct. The problem might be related to the Python import system, not the Dockerfile itself. 

However, you can try to modify your Dockerfile to make sure that everything is in the correct place. Here is a revised version of your Dockerfile:

```Dockerfile
# Use an official Python runtime as a parent image
FROM python:3.8-slim-buster

# Set the working directory in the container to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY ./app /app

# Copy the requirements.txt file into the container at /app
COPY requirements.txt /app

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r /app/requirements.txt

# Make port 8000 available to the world outside this container
EXPOSE 8000

# Run the command to start uvicorn
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
```

In your `docker-compose.yml` file, make sure you have specified the build context correctly:

```yaml
version: '3'
services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
```

If the problem persists, check your Python code. Make sure that you are importing the 'app' module correctly in your `main.py` file. If your `main.py` file is in the same directory as your 'app' module, you should be able to import it like this:

```python
from . import app
```

If 'app' is a file in the same directory, you can import functions from it like this:

```python
from .app import my_function
```

If 'app' is a directory, make sure it contains an `__init__.py` file to make it a package. Then you can import modules from it like this:

```python
from .app import my_module
```