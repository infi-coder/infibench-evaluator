The Rule of Five is not necessarily outdated, but it's true that modern C++ practices and features like smart pointers have reduced its necessity in many cases. 

You're correct that for many classes, especially those that only contain simple data types or use smart pointers, the compiler-generated versions of these functions will be sufficient. 

However, there are still cases where you might need to define these functions yourself:

1. **Performance considerations**: The compiler-generated versions of these functions perform shallow copies, which might not be the most efficient way to handle resources in some cases. For example, if your class contains a large dynamically allocated array, it might be more efficient to implement a move constructor that simply transfers ownership of the array, rather than copying all the elements.

2. **Resource management**: If your class is managing a resource that can't be handled by a smart pointer (e.g., a file handle or a network socket), you'll need to implement these functions to manage the resource correctly.

3. **Ownership semantics**: If your class has unique ownership semantics that can't be expressed with the standard library smart pointers, you might need to implement these functions. For example, you might have a class where copy assignment transfers ownership rather than making a copy.

4. **Interaction with legacy code**: If you're working with older code that doesn't use smart pointers, you might need to implement these functions.

So while it's true that modern C++ features have made the Rule of Five less necessary, there are still cases where it's relevant. It's also worth noting that even if you don't need to implement these functions, understanding the Rule of Five is still important for understanding how resources are managed in C++.