You can create an index in Mongoose schema using Nest.js by using the `@Prop` decorator and setting the `index` option to `true`. However, Mongoose will not automatically build the index for you. You have to manually tell Mongoose to build the index.

Here is how you can do it:

```javascript
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

@Schema()
export class MySchemaClass extends Document {

  @Prop()
  _id: string;

  @Prop({required: true, index: true})
  type: string;

  @Prop()
  creationDate: string;

  @Prop()
  name: string;
}

export const MySchema = SchemaFactory.createForClass(MySchemaClass);
```

Then, in your service or wherever you are using the model, you can call the `ensureIndexes` function to tell Mongoose to build the indexes:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { MySchemaClass } from './my-schema.model';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(@InjectModel(MySchemaClass.name) private readonly myModel: Model<MySchemaClass>) {}

  async onModuleInit() {
    await this.myModel.init();
    await this.myModel.ensureIndexes(); // This is where the indexes are built
  }
}
```

The `ensureIndexes` function will tell Mongoose to build the indexes defined in your schema. This function returns a promise, so you can use `await` to wait for the indexes to be built before proceeding.