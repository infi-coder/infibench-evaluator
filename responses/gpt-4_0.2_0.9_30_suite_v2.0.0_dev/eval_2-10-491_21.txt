In Rust, there are several ways to express the same logic in a more idiomatic way. Here are some of them:

1. Using `if let` with a condition:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = foo {
        if foo_val < 5 {
            foo.replace(5);
        }
    } else {
        foo.replace(5);
    }
}
```

2. Using `map_or` method:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
}
```

3. Using `match` with a condition in a more idiomatic way:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    match foo {
        Some(foo_val) if foo_val >= 5 => {}
        _ => { foo.replace(5); }
    }
}
```

4. Using `if let` with `else`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = &foo {
        if *foo_val >= 5 {
            return;
        }
    }
    foo.replace(5);
}
```

5. Using `unwrap_or_else` method:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = Some(*foo.get_or_insert(5));
}
```

6. Using `or_else` method:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.or_else(|| Some(5));
}
```

All these methods are more idiomatic and concise than the original code. They all do the same thing: replace the value of `foo` with `5` if it's `None` or if the inner value is less than `5`.