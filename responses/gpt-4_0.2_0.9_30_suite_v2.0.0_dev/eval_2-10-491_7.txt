Here are a few more idiomatic ways to express the same logic:

1. Using `if let` with a condition:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```
    This is a bit more verbose, but it's more clear about what's happening.

2. Using `map_or`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```
    This is a bit more concise, but it's also a bit harder to read.

3. Using `or_else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.or_else(|| Some(5));
    }
    ```
    This is the most concise, but it doesn't check the condition on the inner value.

4. Using `match` with a guard:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        match foo {
            Some(foo_val) if foo_val >= 5 => {},
            _ => { foo = Some(5); }
        }
    }
    ```
    This is similar to your original code, but it uses a guard in the match arm to check the condition on the inner value.

5. Using `filter`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.filter(|&x| x >= 5).or(Some(5));
    }
    ```
    This is a bit more functional-style, and it's also quite concise. It uses `filter` to check the condition on the inner value, and `or` to provide a default value if the option is `None` or the condition is not met.