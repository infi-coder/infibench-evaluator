The reason why you are seeing log 2 before log 1 is because the `onItemSelected` method is a callback method that gets called asynchronously when an item is selected in the spinner. This means that the code inside `onItemSelected` will not execute immediately when you set up the spinner, but rather it will execute later when an item is actually selected by the user.

The `return itemSelected` statement at the end of your `setupListWithAdapter` function is executed immediately after the spinner is set up, and at this point, `itemSelected` is still an empty string because `onItemSelected` has not been called yet.

If you want to use the selected item outside of the `setupListWithAdapter` function, you could consider using a higher-order function or a callback function. Here's an example of how you could do it:

```kotlin
fun Spinner.setupListWithAdapter(list: MutableList<String>, callback: (String) -> Unit) {
    val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, list)
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
    this.adapter = adapter
    this.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
        override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {
            val itemSelected = list[p2]
            Log.e("categoryLog","1 : " + itemSelected)
            callback(itemSelected)
        }
        override fun onNothingSelected(p0: AdapterView<*>?) {
        }
    }
}
```

Then you can use it like this:

```kotlin
mySpinner.setupListWithAdapter(myList) { selectedItem ->
    // Do something with selectedItem
    Log.e("categoryLog","2 : " + selectedItem)
}
```

In this example, the `callback` function will be called with the selected item as an argument every time a new item is selected in the spinner.