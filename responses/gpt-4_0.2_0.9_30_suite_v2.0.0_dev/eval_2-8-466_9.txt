You can use the `gin.WrapH` function to wrap the Prometheus HTTP handler into a Gin handler. Here's how you can modify the main function to use Gin:

```go
package main

import (
    "log"

    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
        Name: "cpu_temperature_celsius",
        Help: "Current temperature of the CPU.",
    })


func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new Gin router
    r := gin.Default()

    // Use the Gin wrapper function to convert the Prometheus HTTP handler
    // to a Gin handler and register it at the "/metrics" endpoint
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    // Start the Gin server
    log.Fatal(r.Run(":8080"))
}
```
In this code, we create a new Gin router using `gin.Default()`, then use `r.GET` to register the Prometheus metrics handler at the "/metrics" endpoint. The `gin.WrapH` function is used to convert the Prometheus HTTP handler to a Gin handler.