You can use the `iter()` method to create an iterator over the vector, and then use the `min()` method to find the minimum value. Here is how you can do it:

```rust
let mut v = vec![5, 6, 8, 4, 2, 7];

match v.iter().min() {
    Some(min) => println!("The minimum value is {}", min),
    None => println!("The vector is empty"),
}
```

In this code, `v.iter().min()` returns an `Option` that contains the minimum value if the vector is not empty, and `None` if the vector is empty. The `match` statement is used to handle both possibilities.

Please note that `min()` method returns a reference to the minimum value, not the value itself. If you want to get the value, you need to dereference it.