You can use the `react-intersection-observer` npm package to detect if an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package in your component:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the event to be triggered only once
  });

  return (
    <div id="parent">
      {data.map(item => {
        const [ref, inView] = useInView({
          triggerOnce: false,
        });

        return (
          <div ref={ref} id={item.id}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {data.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this code, `useInView` returns a `ref` that you can attach to the divs. It also returns a boolean `inView` that tells you whether the div is in the viewport or not.

Please note that the Intersection Observer API is not supported in all browsers. You may need a polyfill for full compatibility. You can install it with:

```bash
npm install intersection-observer
```

And import it in your project:

```javascript
import 'intersection-observer';
```