You can optimize your task by using `awk` which is more suitable for text processing. Here is an optimized version of your script:

```bash
awk -F'=' '
    /^name/ { if (name && value) print name "=" value; name=$2; value="" }
    /^value/ { value=$2 }
    END { if (name && value) print name "=" value }
' input.txt > output.txt
```

This script works as follows:

- `-F'='` sets the field separator to `=`.
- `/^name/` matches lines that start with `name`. If `name` and `value` are both non-empty, it prints them. Then it sets `name` to the second field of the current line and `value` to an empty string.
- `/^value/` matches lines that start with `value` and sets `value` to the second field of the current line.
- `END` is a special pattern that matches the end of the input. If `name` and `value` are both non-empty, it prints them.

This script should be significantly faster than your original script because it processes the input line by line instead of word by word and avoids calling external commands like `grep` and `sed`.