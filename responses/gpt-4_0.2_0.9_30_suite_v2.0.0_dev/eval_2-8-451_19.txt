Yes, you can take advantage of Docker's layer caching with Go modules (vgo). Here's how you can do it:

First, you need to copy your `go.mod` and `go.sum` files into the Docker image. These files act as your dependency manifest. Then, you can download your dependencies. This will be cached as long as your `go.mod` and `go.sum` files do not change.

After that, you can copy your code and build your application. Here's a sample Dockerfile:

```Dockerfile
# Start from the latest golang base image
FROM golang:1.11

# Add Maintainer Info
LABEL maintainer="Your Name <your.email@example.com>"

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

# Expose port 8080 to the outside world
EXPOSE 8080

# Command to run the executable
CMD ["./main"]
```

This Dockerfile will take advantage of Docker's layer caching. The `go mod download` command will be cached until the `go.mod` and `go.sum` files are changed. This can significantly speed up your Docker builds.