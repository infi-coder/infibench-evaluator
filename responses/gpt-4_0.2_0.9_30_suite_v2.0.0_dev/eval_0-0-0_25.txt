Sure, here is a function that should do what you're asking for:

```javascript
function keys_and_prices(raw_obj) {
    var keys = [];
    var prices = [];
    for (var key in raw_obj) {
        if (raw_obj.hasOwnProperty(key)) {
            keys.push(key);
            prices.push(raw_obj[key].price);
        }
    }
    return [keys, prices];
}
```

This function loops over the properties of the input object. For each property, it checks if the property is a direct property of the object (i.e., it's not inherited from the prototype), and if it is, it adds the property name to the `keys` array and the `price` value to the `prices` array. Finally, it returns an array containing the `keys` and `prices` arrays.

You can use this function like this:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the `==` operator in JavaScript performs type coercion if the types of the two variables are different. If you want to check for equality without type coercion, you should use the `===` operator. However, when comparing arrays, `==` and `===` will only return true if the arrays are the same instance. If you want to check if two arrays have the same values, you should compare them element by element.