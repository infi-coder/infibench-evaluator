Sure, here is a function that does exactly what you want:

```javascript
function keys_and_prices(raw_obj) {
    let keys = [];
    let prices = [];
    for (let key in raw_obj) {
        if (raw_obj.hasOwnProperty(key)) {
            keys.push(key);
            prices.push(raw_obj[key].price);
        }
    }
    return [keys, prices];
}
```

This function iterates over the keys in the `raw_obj` object using a `for...in` loop. If the key is a direct property of the object (not inherited from the prototype), it pushes the key into the `keys` array and the corresponding price into the `prices` array. Finally, it returns an array containing the `keys` and `prices` arrays.

You can use this function with your `itemsToBuy` object like this:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy);
console.log(ret[0]); // ["milk", "bread", "potato"]
console.log(ret[1]); // [20, 15, 10]
```

Note: The `console.log` is used here for demonstration purposes. In your actual code, you can use the returned arrays as needed.