You can use the `react-intersection-observer` npm package to detect when an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package using npm:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package to track the visibility of each div. Here's an example:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = ({ data }) => {
  return (
    <div id="parent">
      {data.map(item => {
        const { ref, inView } = useInView({
          triggerOnce: false, // Change to true if you want to track only the first time in view
        });

        return (
          <div id={item.id} ref={ref}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {item.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this example, `useInView` returns a `ref` that you attach to the div you want to observe. It also returns an `inView` boolean that tells you whether the div is in the viewport or not. You can use this boolean to conditionally render content based on whether the div is in the viewport.

Note: The Intersection Observer API is not supported in all browsers. If you need to support older browsers, you may need to use a polyfill.