You can use a factory pattern to create different instances of `ServiceBusClient` with different queue names. Here's an example of how you can do it:

First, define an interface for your factory:

```c#
public interface IServiceBusClientFactory
{
    ServiceBusSender CreateSender(string queueName);
}
```

Then, implement this interface:

```c#
public class ServiceBusClientFactory : IServiceBusClientFactory
{
    private readonly string _connectionString;

    public ServiceBusClientFactory(string connectionString)
    {
        _connectionString = connectionString;
    }

    public ServiceBusSender CreateSender(string queueName)
    {
        var client = new ServiceBusClient(_connectionString);
        return client.CreateSender(queueName);
    }
}
```

Register your factory in the DI container:

```c#
_services.AddSingleton<IServiceBusClientFactory>(new ServiceBusClientFactory(connectionString));
```

Then, in your `CarReservationMessagingService`, you can inject the factory and use it to create `ServiceBusSender` instances for different queues:

```c#
public class CarReservationMessagingService
{
    private readonly IServiceBusClientFactory _factory;

    public CarReservationMessagingService(IServiceBusClientFactory factory)
    {
        _factory = factory;
    }

    public async Task PublishNewCarReservationMessageAsync(CarReservation carReservation, string queueName)
    {
        var sender = _factory.CreateSender(queueName);
        // ...
        await sender.SendMessageAsync(message);
    }
}
```

In this way, you can create `ServiceBusSender` instances for different queues as needed.