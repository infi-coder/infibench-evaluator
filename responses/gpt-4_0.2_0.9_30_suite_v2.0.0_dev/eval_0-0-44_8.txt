To create an index on a property in a Mongoose schema using Nest.js, you can use the `@Prop()` decorator with the `index` option set to `true` as you did in your first example. However, the index creation in Mongoose is an asynchronous operation that might not have completed when you checked.

Here's your schema with the `index` option:

```javascript
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document } from 'mongoose';

@Schema()
export class MySchemaClass extends Document {

  @Prop()
  _id: string;

  @Prop({required: true, index: true})
  type: string;

  @Prop()
  creationDate: string;

  @Prop()
  name: string;
}

export const MySchema = SchemaFactory.createForClass(MySchemaClass);
```

After defining your schema, you need to use it in a module:

```javascript
import { Module } from '@nestjs/common';
import { MongooseModule } from '@nestjs/mongoose';
import { MySchemaClass, MySchema } from './my-schema.model';

@Module({
  imports: [
    MongooseModule.forFeature([{ name: MySchemaClass.name, schema: MySchema }])
  ],
})
export class MyModule {}
```

Then, you should ensure that the indexes are created when the application starts. You can do this by calling the `ensureIndexes()` method on the model:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { MySchemaClass } from './my-schema.model';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(
    @InjectModel(MySchemaClass.name) private readonly myModel: Model<MySchemaClass>,
  ) {}

  async onModuleInit() {
    await this.myModel.ensureIndexes(); // This will create indexes
  }
}
```

This will ensure that the indexes are created when the module is initialized.