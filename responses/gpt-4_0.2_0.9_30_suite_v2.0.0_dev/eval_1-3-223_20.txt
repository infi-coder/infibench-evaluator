You can use the `pkg_resources` module to get the installed version of a package, and the `pip` module to get the latest version available on PyPI. Here is a function that does this:

```python
import pkg_resources
import xmlrpc.client

def checkVersion(pkgName):
    pypi = xmlrpc.client.ServerProxy('https://pypi.org/pypi')
    available = pypi.package_releases(pkgName)
    if not available:  # package not found
        return False
    available = available[0]  # get the latest version number

    try:
        installed = pkg_resources.get_distribution(pkgName).version
    except pkg_resources.DistributionNotFound:  # package is not installed
        return False

    return installed == available
```

This function first gets the latest version number of the package from PyPI. If the package is not found on PyPI, the function returns `False`.

Then, it gets the installed version number of the package. If the package is not installed, the function returns `False`.

Finally, it checks if the installed version number is the same as the latest version number. If they are the same, the function returns `True`; otherwise, it returns `False`.

Please note that this function requires the `pkg_resources` module, which is part of `setuptools`, and the `xmlrpc.client` module, which is part of the Python standard library. If you don't have `setuptools` installed, you can install it with `pip install setuptools`.