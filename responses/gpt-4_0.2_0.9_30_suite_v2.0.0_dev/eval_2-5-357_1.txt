The `@Autowired` annotation was historically used to indicate to Spring that a particular constructor or setter should be used for dependency injection. However, as of Spring 4.3, if a class has only one constructor, Spring will use that constructor for dependency injection even if it's not annotated with `@Autowired`.

The reason you might still see `@Autowired` being used is likely due to one or more of the following:

1. **Legacy Code**: The codebase might be older (pre-Spring 4.3) where `@Autowired` was necessary.

2. **Explicitness**: Some developers prefer to be explicit about their intentions. Using `@Autowired` makes it clear that the constructor is being used for dependency injection.

3. **Multiple Constructors**: If a class has more than one constructor, Spring won't know which one to use for dependency injection unless you annotate one of them with `@Autowired`.

4. **Education and Tutorials**: Many learning resources still use `@Autowired` in their examples, so new Spring developers might just be following those examples without knowing that `@Autowired` is not necessary for single constructor classes.