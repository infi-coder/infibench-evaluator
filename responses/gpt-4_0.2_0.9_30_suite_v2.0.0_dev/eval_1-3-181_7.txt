Sure, here is a function that does what you want:

```python
import numpy as np

def getMax(matrix):
    # Convert the input to a numpy array (in case it isn't already)
    matrix = np.array(matrix)
    # Select the third column from each 2D sub-array, find the max, and reshape to a 2D array
    max_values = matrix[:,:,2].max(axis=1).reshape(-1,1)
    return max_values
```

This function works by first selecting the third column from each 2D sub-array in the 3D array (using `matrix[:,:,2]`). It then finds the maximum value in each of these columns (using `.max(axis=1)`), and finally reshapes the resulting 1D array to a 2D array (using `.reshape(-1,1)`).

Here is how you can use this function with your example array:

```python
matrix = np.array([[[4, 1, 5, 2, 5, 5, 7, 8, 9, 7],
                    [7, 4, 2, 4, 7, 8, 4, 1, 3, 5],
                    [6, 1, 2, 1, 1, 1, 2, 3, 7, 6],
                    [5, 5, 5, 0, 5, 4, 3, 8, 7, 1],
                    [2, 8, 6, 7, 4, 7, 5, 5, 5, 1]],
                   [[9, 9, 5, 8, 0, 7, 3, 9, 8, 1],
                    [9, 1, 9, 5, 7, 4, 5, 4, 7, 0],
                    [1, 0, 4, 8, 7, 3, 4, 3, 8, 8],
                    [8, 1, 3, 1, 7, 0, 9, 9, 3, 8],
                    [4, 0, 2, 3, 8, 2, 0, 1