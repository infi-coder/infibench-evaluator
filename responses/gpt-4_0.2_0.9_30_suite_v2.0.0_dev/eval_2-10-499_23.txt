In Rust, you cannot set a `TcpStream` to an empty or null value because `TcpStream` does not implement the `Default` trait. Instead, you can use `Option<TcpStream>` for the `conn` field in your struct. This allows you to set the `conn` field to `None` in the `new` method and `Some(TcpStream)` in the `connect` method.

Here is how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None, // set to None
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c), // set to Some(TcpStream)
            Err(_) => panic!(),
        }
    }
}
```

Now, `conn` is an `Option<TcpStream>`, which means it can be `None` or `Some(TcpStream)`. When you want to use `conn`, you will need to handle the `None` case. This is usually done with a match statement or the `unwrap` method, which will panic if `conn` is `None`.