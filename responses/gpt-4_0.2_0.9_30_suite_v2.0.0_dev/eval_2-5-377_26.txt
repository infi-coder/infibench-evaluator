The problem you're facing is because you're trying to format a `LocalDate` object which doesn't contain time information. You should use `ZonedDateTime` or `LocalDateTime` instead.

Here is the corrected code:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneId.systemDefault()).format(dateFormat);
    }
}
```

In this code, `LocalDateTime.now().minusDays(new Random().nextInt(365 * 70))` generates a random date and time within the last 70 years. 

The `DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'")` is used to format the date and time into the desired format. 

The `dateTime.atZone(ZoneId.systemDefault())` is used to convert the `LocalDateTime` to `ZonedDateTime` which can be formatted into the desired format. 

Please note that the 'Z' in the format stands for the Zulu timezone (UTC+0). If you want to use the system's default timezone, you should replace `'Z'` with `'XXX'` in the pattern.