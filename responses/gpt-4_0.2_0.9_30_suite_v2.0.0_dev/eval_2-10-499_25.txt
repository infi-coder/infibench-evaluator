In Rust, you can't set a field of a struct to an "empty" value if the field's type doesn't have a concept of an "empty" value. In your case, `TcpStream` doesn't have a default value or an "empty" state.

However, you can use `Option<TcpStream>` instead of `TcpStream` for your `conn` field. `Option<T>` is an enum that can either be `Some(T)` or `None`. When you create a new `FistClient`, you can set `conn` to `None`, and when you connect, you can set `conn` to `Some(tcp_stream)`.

Here's how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

Now, `conn` is an `Option<TcpStream>`, and you can set it to `None` when you create a new `FistClient`. When you connect, you can set `conn` to `Some(tcp_stream)`.