Yes, there are more idiomatic ways to express the same logic in Rust. Here are a few:

1. Using `if let` with a condition:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

2. Using `match` with a guard:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        match foo {
            Some(foo_val) if foo_val >= 5 => {}
            _ => { foo.replace(5); }
        }
    }
    ```

3. Using `if let` with `else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val >= 5 {
                // do nothing
            } else {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

4. Using `map_or`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

5. Using `map_or_else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or_else(|| Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

6. Using `unwrap_or`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        let foo_val = foo.unwrap_or(5);
        if foo_val < 5 {
            foo.replace(5);
        }
    }
    ```

Each of these methods has its own advantages and use cases. The best one to use depends on the specific requirements of your code.