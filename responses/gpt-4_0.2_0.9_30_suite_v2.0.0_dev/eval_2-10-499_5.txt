In Rust, you cannot set a field of a struct to an "empty" value if the type of that field does not implement the `Default` trait. In your case, `TcpStream` does not implement the `Default` trait, so you cannot set it to a default value.

However, you can use `Option<TcpStream>` instead of `TcpStream` for the `conn` field. `Option<TcpStream>` can be `None` or `Some(TcpStream)`. When you create a new `FistClient`, you can set `conn` to `None`. When you connect, you can set `conn` to `Some(TcpStream)`.

Here is how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

Now, whenever you want to use `conn`, you will have to check if it is `Some(TcpStream)` or `None`. If it is `Some(TcpStream)`, you can use the `TcpStream`. If it is `None`, you will have to handle the case where `conn` is not set.