Yes, you can take advantage of Docker's layer caching with Go modules. Here's an example Dockerfile:

```Dockerfile
# Start from the latest golang base image
FROM golang:1.11

# Add Maintainer Info
LABEL maintainer="Your Name <youremail@domain.com>"

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

# Expose port 8080 to the outside world
EXPOSE 8080

# Command to run the executable
CMD ["./main"]
```

In this Dockerfile, we first copy the `go.mod` and `go.sum` files and download the dependencies. This layer will be cached by Docker as long as the `go.mod` and `go.sum` files do not change. Then we copy the rest of the source code and build the application. This way, Docker can use the cached layer with the downloaded dependencies for most builds, speeding up the build process.