In Rust, you can't create an empty `TcpStream` directly. However, you can use `Option<TcpStream>` for the `conn` field. This allows you to set `conn` to `None` initially and then set it to `Some(stream)` when you establish a connection.

Here is how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None, // set conn to None initially
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c), // set conn to Some(stream) when connection is established
            Err(_) => panic!(),
        }
    }
}
```

Now, whenever you want to use `conn`, you need to check if it is `Some(stream)` or `None`. If it is `Some(stream)`, you can use the `stream`. If it is `None`, it means that the connection has not been established yet.