Here is a function `mySplit` that uses the `strsplit` function to split the strings in `col1` by comma and colon, and then reshapes the resulting list into a data frame:

```r
mySplit <- function(df) {
  # Split the strings in col1 by comma and colon
  split_list <- strsplit(as.character(df$col1), ",|:")
  
  # Initialize an empty data frame
  df_new <- data.frame()
  
  # Loop over the list
  for (i in seq_along(split_list)) {
    # Extract the values
    values <- split_list[[i]][-seq(1, length(split_list[[i]]), by = 2)]
    
    # Extract the names
    names <- split_list[[i]][seq(1, length(split_list[[i]]), by = 2)]
    
    # Create a data frame from the values and names
    df_temp <- setNames(data.frame(t(values), stringsAsFactors = FALSE), names)
    
    # Bind the data frames
    df_new <- rbind(df_new, df_temp)
  }
  
  return(df_new)
}
```

You can use this function on your data frame `df` like this:

```r
df <- data.frame(col1 = c("name:Michael,Age:31,City:NYC", "name:Tom,Age:25,City:NA"), stringsAsFactors = FALSE)
df_new <- mySplit(df)
print(df_new)
```

This will print:

```r
     name Age City
1 Michael  31  NYC
2     Tom  25   NA
```

Please note that this function assumes that the strings in `col1` always follow the same pattern (i.e., "name:value,name:value,name:value"). If this is not the case, you may need to modify the function accordingly.