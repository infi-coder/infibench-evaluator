You can use the `react-intersection-observer` npm package to achieve this. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

Here's how you can use it:

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package in your component:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the event to be triggered only once
  });

  return (
    <div id="parent">
      {data.map((item) => {
        const [ref, inView] = useInView({
          triggerOnce: false,
        });

        return (
          <div ref={ref} id={item.id}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {data.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this example, `useInView` returns a `ref` that you can attach to your divs. When a div is in the viewport, `inView` will be `true`. When it's not, `inView` will be `false`.

You can adjust the options passed to `useInView` to customize its behavior. For example, you can use the `triggerOnce` option to decide whether the hook should continue to monitor an element after it has been in the viewport once.

Please note that the Intersection Observer API is not supported in all browsers. You may need to use a polyfill for full compatibility. The `react-intersection-observer` package provides instructions for this in its documentation.