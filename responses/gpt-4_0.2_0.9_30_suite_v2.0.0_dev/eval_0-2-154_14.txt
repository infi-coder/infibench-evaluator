Sure, here is a generator function that uses recursion to handle nested tags:

```javascript
function* iterLeafNodes(strHTML, format=[]) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(strHTML, 'text/html');
  const body = doc.body;

  function* walk(node, format) {
    if (node.nodeType === Node.TEXT_NODE) {
      if (node.textContent.trim() !== '') {
        yield { text: node.textContent, format };
      }
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      const newFormat = [...format];
      if (node.tagName.toLowerCase() !== 'p') {
        newFormat.push(node.tagName.toLowerCase());
      }
      for (const child of node.childNodes) {
        yield* walk(child, newFormat);
      }
    }
  }

  for (const child of body.childNodes) {
    yield* walk(child, format);
  }
}
```

This function will iterate over all the leaf nodes of the HTML string, keeping track of the current format (tags) for each node. It will yield an object for each text node, containing the text and the format.