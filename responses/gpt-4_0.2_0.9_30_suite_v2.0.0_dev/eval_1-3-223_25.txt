You can use the `pkg_resources` module to get the installed version of a package, and the `pip` module to get the latest version available on PyPI. Here's how you can do it:

```python
import pkg_resources
import xmlrpc.client

def checkVersion(pkgName):
    pypi = xmlrpc.client.ServerProxy('https://pypi.python.org/pypi')
    available = pypi.package_releases(pkgName)
    if not available:  # package not found
        return False

    installed_version = pkg_resources.get_distribution(pkgName).version
    return installed_version == available[0]
```

This function will return `True` if the installed version of the package is the latest, and `False` otherwise. If the package is not found on PyPI, it will also return `False`.

Please note that this function will raise a `DistributionNotFound` exception if the package is not installed. If you want to handle this case, you can modify the function like this:

```python
def checkVersion(pkgName):
    pypi = xmlrpc.client.ServerProxy('https://pypi.python.org/pypi')
    available = pypi.package_releases(pkgName)
    if not available:  # package not found
        return False

    try:
        installed_version = pkg_resources.get_distribution(pkgName).version
    except pkg_resources.DistributionNotFound:
        return False  # package is not installed

    return installed_version == available[0]
```

In this version, the function will return `False` if the package is not installed.