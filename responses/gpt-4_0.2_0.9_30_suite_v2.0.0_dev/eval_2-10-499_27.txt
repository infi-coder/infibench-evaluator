In Rust, you can't directly assign an "empty" value to `TcpStream` because `TcpStream` doesn't implement the `Default` trait. However, you can use `Option<TcpStream>` instead. This way, you can assign `None` as a default value and `Some(TcpStream)` when you have a connection.

Here is how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None, // Default value
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this code, `conn` is an `Option<TcpStream>`. It is `None` by default and becomes `Some(TcpStream)` when a connection is established. This way, you can check whether a connection is established by checking if `conn` is `Some` or `None`.