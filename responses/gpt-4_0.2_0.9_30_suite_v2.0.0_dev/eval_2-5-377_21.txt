The problem you're facing is because you're trying to format a `LocalDate` object using `SimpleDateFormat` which expects a `Date` object. `LocalDate` does not contain time information, so you can't format it to include time.

To solve this, you should use `ZonedDateTime` or `LocalDateTime` instead of `LocalDate`. Here's how you can do it:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneId.systemDefault()).withZoneSameInstant(ZoneOffset.UTC).format(formatter);
    }
}
```

In this code, `LocalDateTime.now().minusDays(new Random().nextInt(365 * 70))` generates a random date and time in the past 70 years. `DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'")` is used to format the date and time. `dateTime.atZone(ZoneId.systemDefault()).withZoneSameInstant(ZoneOffset.UTC).format(formatter)` converts the local date and time to UTC and then formats it.

Please note that the 'Z' in the format stands for the Zero timezone, i.e., UTC. If you want to generate a date-time string in the local timezone, you should remove `'Z'` from the format and use `dateTime.format(formatter)` instead of `dateTime.atZone(ZoneId.systemDefault()).withZoneSameInstant(ZoneOffset.UTC).format(formatter)`.