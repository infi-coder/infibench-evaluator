Yes, there are more idiomatic ways to express the same logic in Rust. Here are a few alternatives:

1. Using `if let` with a condition:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

2. Using `map_or`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

3. Using `match` with a tuple:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        match (foo, foo.filter(|&foo_val| foo_val >= 5)) {
            (None, _) | (_, None) => { foo.replace(5); }
            _ => {}
        }
    }
    ```

4. Using `if let` with `else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val >= 5 {
                return;
            }
        }
        foo.replace(5);
    }
    ```

5. Using `map_or_else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or_else(|| Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

All of these alternatives are more idiomatic and concise than the original code. They all do the same thing: if `foo` is `None` or if the value inside `foo` is less than 5, they replace `foo` with `Some(5)`. Otherwise, they leave `foo` unchanged.