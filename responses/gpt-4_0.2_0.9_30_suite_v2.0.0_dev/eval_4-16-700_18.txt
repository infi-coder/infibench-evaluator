You can optimize your script by using awk, which is designed for text processing. Here's an example:

```bash
awk -F'=' '
  /^name/ {name=$2; next} 
  /^value/ && name {print name"="$2; name=""}
' input.txt > output.txt
```

This script works as follows:

- `-F'='` sets the field separator to `=`.
- `/^name/ {name=$2; next}` If the line starts with `name`, it saves the value (the second field) in the variable `name` and skips to the next line.
- `/^value/ && name {print name"="$2; name=""}` If the line starts with `value` and `name` is not empty, it prints `name=value` and resets `name` to empty.

This script should be significantly faster than your original script.