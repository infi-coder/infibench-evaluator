Yes, Go modules support this kind of workflow. Here's how you can do it:

1. Copy your `go.mod` and `go.sum` files into the Docker image.

```Dockerfile
# Start from the latest golang base image
FROM golang:latest

# Add Maintainer Info
LABEL maintainer="Your Name <youremail@domain.com>"

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files 
COPY go.mod go.sum ./
```

2. Download the dependencies. Docker will cache this layer as long as your `go.mod` and `go.sum` files do not change.

```Dockerfile
# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed 
RUN go mod download
```

3. Copy the rest of your code and build the application.

```Dockerfile
# Copy the source from the current directory to the Working Directory inside the container 
COPY . .

# Build the Go app
RUN go build -o main .

# This container exposes port 8080 to the outside world
EXPOSE 8080

# Run the binary program produced by `go install`
CMD ["./main"]
```

This way, Docker will cache the image layer with the downloaded dependencies, and only re-download them when the `go.mod` or `go.sum` files change. This can significantly speed up your Docker builds.