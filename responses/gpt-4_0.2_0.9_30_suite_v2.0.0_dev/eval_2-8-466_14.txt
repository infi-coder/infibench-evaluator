You can use the `gin.WrapH` function to wrap the `promhttp.Handler()` into a Gin-compatible handler. Here is how you can modify the main function:

```go
package main

import (
    "log"

    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
        Name: "cpu_temperature_celsius",
        Help: "Current temperature of the CPU.",
    })


func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new gin router
    r := gin.Default()

    // The Handler function provides a default handler to expose metrics
    // via an HTTP server. "/metrics" is the usual endpoint for that.
    // Use gin.WrapH to convert it into a gin.HandlerFunc
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    // Start the server
    log.Fatal(r.Run(":8080"))
}
```
In this code, we create a new Gin router and use `r.GET` to handle the "/metrics" endpoint. We use `gin.WrapH(promhttp.Handler())` to convert the Prometheus HTTP handler into a Gin-compatible handler.