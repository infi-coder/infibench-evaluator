You can use the `react-intersection-observer` npm package to check if an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package using npm:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package to check if an element is in the viewport:

```jsx
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
    const [ref, inView] = useInView({
        triggerOnce: false, // Change this to true if you want the event to be triggered only once
    });

    return (
        <div id="parent">
            {data.map(item => (
                <div ref={ref} id={item.id}>
                    {inView ? 'In viewport' : 'Not in viewport'}
                </div>
            ))}
        </div>
    );
};

export default MyComponent;
```

In this example, `useInView` returns a `ref` that you can attach to the divs. When a div is in the viewport, `inView` will be `true`, and when it's not, `inView` will be `false`.

Please note that this will only work for the last item in the map because you are using the same ref for all items. If you want to check for each item individually, you will need to create a new component for the items and use the `useInView` hook in that component.

```jsx
import React from 'react';
import { useInView } from 'react-intersection-observer';

const Item = ({ id, title }) => {
    const [ref, inView] = useInView({
        triggerOnce: false, // Change this to true if you want the event to be triggered only once
    });

    return (
        <div ref={ref} id={id}>
            {inView ? `${title} is in viewport` : `${title} is not in viewport`}
        </div>
    );
};

const MyComponent = () => {
    return (
        <div id="parent">
            {data.map(item => (
                <Item key={item.id} id={item.id} title={item.title} />
            ))}
        </div>
    );
};

export default MyComponent;
```

In this example