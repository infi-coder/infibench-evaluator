If you are using GitHub Actions, you can use the `actions/setup-java` action to set up the JDK version you need. Here is an example of how to use it:

```yaml
name: Java CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: ./mvnw clean install
```

In this example, the `actions/setup-java@v1` action is used to set up JDK 1.8. You can replace `1.8` with the version of Java you need.

If you are using Azure Pipelines, you can use the `UseJava` task to set up the JDK version you need. Here is an example of how to use it:

```yaml
trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseJava@0
  inputs:
    version: '1.8'
    jdkArchitecture: 'x64'
- script: ./mvnw clean install
  displayName: 'Build with Maven'
```

In this example, the `UseJava@0` task is used to set up JDK 1.8. You can replace `1.8` with the version of Java you need.