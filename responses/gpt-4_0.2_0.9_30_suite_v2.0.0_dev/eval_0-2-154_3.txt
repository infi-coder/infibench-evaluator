Sure, here is a generator function that should do the job:

```javascript
function* iterLeafNodes(strHTML, format=[]) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(strHTML, "text/html");
  const body = doc.body;

  function* walk(node, format) {
    if (node.nodeType === Node.TEXT_NODE) {
      if (node.textContent.trim() !== '') {
        yield { text: node.textContent, format };
      }
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      const newFormat = format.slice();
      newFormat.push(node.tagName.toLowerCase());
      for (const child of node.childNodes) {
        yield* walk(child, newFormat);
      }
    }
  }

  for (const child of body.childNodes) {
    yield* walk(child, format);
  }
}
```

This function uses a recursive approach to walk the DOM tree. It starts from the root node and for each child node, it checks if it's a text node or an element node. If it's a text node, it yields an object with the text and the current format. If it's an element node, it adds the tag name to the format and recursively walks its child nodes.