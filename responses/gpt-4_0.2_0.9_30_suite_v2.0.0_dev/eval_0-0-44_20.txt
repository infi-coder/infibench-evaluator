To create an index in Mongoose schema using Nest.js, you can use the `@Prop` decorator with the `index` option set to `true`. However, you also need to ensure that the indexes are actually being created in MongoDB. This can be done by calling the `ensureIndexes()` function on the model.

Here is how you can do it:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(@InjectModel('Schema') private readonly myModel: Model<Schema>) {}

  async onModuleInit(): Promise<void> {
    await this.myModel.init();
    await this.myModel.ensureIndexes(); // This is the important part
  }
}
```

In this example, `MyService` is a service that gets initialized when the module is loaded. The `onModuleInit` function is a lifecycle hook provided by Nest.js that gets called after the module's dependencies are initialized. Inside this function, we call `ensureIndexes` on the model to make sure that the indexes are created in MongoDB.

Please replace `'Schema'` and `Schema` with your actual schema name and schema class respectively.

This should create the index for the `type` field in your schema. If it still doesn't work, you might want to check your MongoDB connection or the permissions of your MongoDB user.