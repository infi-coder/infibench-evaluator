Yes, Go 1.11 with module support (vgo) does allow you to do this. You can use the `go mod download` command to download all the dependencies specified in your `go.mod` file. This command will download and cache your dependencies, making subsequent builds faster.

Here is an example of how you can use it in your Dockerfile:

```Dockerfile
# Start from the latest golang base image
FROM golang:latest as builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

######## Start a new stage from scratch #######
FROM alpine:latest  

RUN apk --no-cache add ca-certificates

WORKDIR /root/

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/main .

# Expose port 8080 to the outside world
EXPOSE 8080

#Command to run the executable
CMD ["./main"] 
```

In this Dockerfile, we first copy over the `go.mod` and `go.sum` files, and then run `go mod download`. This will download and cache all the dependencies. Then we copy over the rest of the source code and build the application. This way, as long as the `go.mod` and `go.sum` files don't change, Docker will use the cached layer for the `go mod download` step, speeding up the build process.