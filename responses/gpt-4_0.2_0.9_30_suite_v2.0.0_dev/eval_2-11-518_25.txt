The Rule of Five is not outdated, but its usage has been reduced due to the advent of smart pointers and other RAII (Resource Acquisition Is Initialization) techniques in modern C++. 

You're correct that many resource-managing classes can be converted into aggregate data structures using smart pointers, which automatically manage the lifetime of the resource. This can eliminate the need for a user-defined destructor, copy constructor, copy assignment operator, move constructor, or move assignment operator in many cases.

However, there are still situations where the Rule of Five is relevant:

1. **Performance considerations**: Sometimes, for performance reasons, you might want to manage memory manually. In such cases, you will need to define all five functions to ensure correct behavior.

2. **Managing non-memory resources**: The Rule of Five is not only about memory management. It's about managing any resource that requires cleanup. This could be a file handle, a network socket, a database connection, a mutex lock, etc. Smart pointers can't manage these resources automatically.

3. **Legacy code and libraries**: You might be working with legacy code or libraries that don't use smart pointers. In such cases, you might need to follow the Rule of Five.

4. **Custom behavior**: Sometimes you might want to define custom behavior for copy/move operations. For example, you might want to keep track of how many times an object has been copied or moved.

So while smart pointers and RAII have made life easier, they haven't made the Rule of Five obsolete. It's still an important concept that every C++ programmer should understand.