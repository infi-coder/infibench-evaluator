Sure, you can create a function that checks if the year is a leap year or not. If it is a leap year, it will return 366, otherwise it will return 365. Here is a simple function that does this:

```python
def DaysInYear(year):
    if (year % 4) == 0:
        if (year % 100) == 0:
            if (year % 400) == 0:
                return 366  # Leap year
            else:
                return 365  # Not a leap year
        else:
            return 366  # Leap year
    else:
        return 365  # Not a leap year
```

This function works by checking if the year is divisible by 4, which is the first condition for a year to be a leap year. If it is, it then checks if the year is divisible by 100. If it is, it needs to also be divisible by 400 to be a leap year. If it is not divisible by 100, it is a leap year. If it is not divisible by 4, it is not a leap year.

You can then use this function in your pandas dataframe by applying it to the year column. For example:

```python
df['year'] = pd.DatetimeIndex(df['date']).year
df['days_in_year'] = df['year'].apply(DaysInYear)
```

This will create a new column in your dataframe that contains the number of days in the year for each date.