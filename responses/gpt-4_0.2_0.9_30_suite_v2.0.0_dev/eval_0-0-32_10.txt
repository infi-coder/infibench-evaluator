You can use the `react-intersection-observer` npm package to achieve this. It uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `InView` component from the package to wrap each of your divs. The `InView` component will provide a callback function that will be called whenever the div enters or leaves the viewport.

Here's an example of how you can use it:

```javascript
import React from 'react';
import { InView } from 'react-intersection-observer';

function MyComponent({ data }) {
    return (
        <div id="parent">
            {data.map(item => (
                <InView as="div" id={item.id} onChange={(inView, entry) => {
                    if (inView) {
                        console.log(`${item.id} is in viewport`);
                    } else {
                        console.log(`${item.id} is not in viewport`);
                    }
                }}>
                    {item.title}
                </InView>
            ))}
        </div>
    );
}
```

In this example, the `onChange` function will be called whenever a div enters or leaves the viewport. The `inView` parameter will be `true` if the div is in the viewport, and `false` otherwise. The `entry` parameter is the Intersection Observer Entry object for the div, which contains more detailed information about its visibility.

You can modify the `onChange` function to keep track of which divs are currently in the viewport, depending on your specific needs.