You can use the `pkg_resources` module to get the installed version of a package, and the `pip` module to get the latest version available on PyPI. Here is a function that does this:

```python
import pkg_resources
import xmlrpc.client

def checkVersion(pkgName):
    pypi = xmlrpc.client.ServerProxy('https://pypi.org/pypi')
    available = pypi.package_releases(pkgName)
    if not available:  # package not found
        return False

    available = available[0]  # get the latest version available
    installed = pkg_resources.get_distribution(pkgName).version

    return installed == available
```

This function first connects to PyPI and gets the list of available versions for the package. If the package is not found, it returns `False`.

Then it gets the latest version available and the installed version. If they are the same, it returns `True`, otherwise it returns `False`.

Please note that this function will raise a `DistributionNotFound` exception if the package is not installed. You may want to handle this exception in your code.

Also, this function assumes that the latest version is the first one in the list returned by `package_releases`. This is usually the case, but there may be exceptions. If you want to be sure to get the latest version, you should sort the versions using the `packaging.version` module.