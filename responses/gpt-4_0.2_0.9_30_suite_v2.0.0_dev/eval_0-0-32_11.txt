You can use the `react-intersection-observer` npm package to check if an element is in the viewport. It uses the Intersection Observer API to check if an element is in the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `InView` component to wrap each item in your map function. The `InView` component will provide a `ref` and an `inView` boolean that you can use to check if the element is in the viewport.

Here is an example of how you can use it:

```jsx
import React from 'react';
import { InView } from 'react-intersection-observer';

const MyComponent = ({ data }) => {
  return (
    <div id="parent">
      {data.map(item => (
        <InView key={item.id}>
          {({ inView, ref }) => (
            <div id={item.id} ref={ref}>
              {inView ? 'In viewport' : 'Not in viewport'}
              {item.title}
            </div>
          )}
        </InView>
      ))}
    </div>
  );
};

export default MyComponent;
```

In this example, the `InView` component wraps each item. It provides a `ref` that you should pass to your div. The `inView` boolean will be `true` if the element is in the viewport and `false` otherwise.

You can use this `inView` boolean to conditionally render different content based on whether the element is in the viewport. In this example, it will render 'In viewport' if the element is in the viewport and 'Not in viewport' otherwise.

Please note that the Intersection Observer API is not supported in all browsers. If you need to support older browsers, you may need to use a polyfill.