```c++
#include <vector>
#include <algorithm>
#include <iterator>

std::vector<std::pair<int, int>> origin_to_goal(std::vector<int> origin) {
    std::vector<std::pair<int, int>> goal;
    std::transform(origin.begin(), origin.end(), std::back_inserter(goal), 
        [&origin](int &n) {
            static int i = -1;
            return std::make_pair(origin[++i], origin[++i]);
        }
    );
    return goal;
}
```
This function uses the `std::transform` function from the standard library to create a new vector of pairs from the original vector. The lambda function passed to `std::transform` creates a pair from two consecutive elements in the original vector. The `static int i` is used to keep track of the current index in the original vector. The `std::back_inserter` is used to add the newly created pairs to the end of the `goal` vector.