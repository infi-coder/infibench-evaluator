You can use the `react-intersection-observer` npm package to detect when an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package using npm:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package in your component:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the event to be triggered only once
  });

  return (
    <div id="parent">
      {data.map(item => {
        const [ref, inView] = useInView({
          triggerOnce: false,
        });

        return (
          <div ref={ref} id={item.id}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {data.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In the above code, `useInView` returns a `ref` and a boolean `inView`. You attach the `ref` to the div you want to observe, and `inView` will be `true` if the div is in the viewport and `false` otherwise.

Please note that the Intersection Observer API is not supported in all browsers, so you may need to use a polyfill for full compatibility. You can install the polyfill with npm:

```bash
npm install intersection-observer
```

And then import it in your project:

```javascript
import 'intersection-observer';
```

This should be done before you use the `react-intersection-observer` package.