```c++
#include <vector>
#include <utility>
#include <algorithm>
#include <iterator>

std::vector<std::pair<int, int>> origin_to_goal(std::vector<int> origin) {
    std::vector<std::pair<int, int>> goal;
    std::transform(origin.begin(), origin.end(), std::back_inserter(goal),
        [&origin](const int &n) {
            static int i = 0;
            return std::make_pair(origin[i++], origin[i++]);
        });
    return goal;
}
```
This function uses the `std::transform` algorithm from the Standard Library to create pairs of elements from the original vector. The `std::back_inserter` is used to add new elements to the end of the `goal` vector. The lambda function passed to `std::transform` creates a pair from two consecutive elements of the `origin` vector. The `static int i` is used to keep track of the current index in the `origin` vector.