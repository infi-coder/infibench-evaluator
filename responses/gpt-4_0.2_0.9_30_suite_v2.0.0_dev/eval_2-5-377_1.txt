The problem you're facing is due to the fact that you're trying to format a `LocalDate` object which does not contain time information. To include time, you should use `LocalDateTime` instead. 

Here's how you can modify your code:

```java
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneOffset.UTC).format(formatter);
    }
}
```

In this code, I've replaced `LocalDate` with `LocalDateTime` to include time information. I've also replaced `SimpleDateFormat` with `DateTimeFormatter` which is the recommended way to format dates in Java 8 and later. The `atZone(ZoneOffset.UTC)` method is used to convert the `LocalDateTime` to a `ZonedDateTime` in the UTC time zone, as the 'Z' in your format string represents the UTC time zone.