The problem you're facing is because you're trying to format a `LocalDate` object using `SimpleDateFormat` which is designed to format `Date` objects. Also, `LocalDate` does not contain time information, it only contains date.

To solve your problem, you should use `ZonedDateTime` instead of `LocalDate` and `DateTimeFormatter` instead of `SimpleDateFormat`. Here is the corrected code:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.Random;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        ZonedDateTime dateTime = ZonedDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(ZonedDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.format(formatter);
    }
}
```

This will generate a random date and time in the past 70 years and format it to the `"yyyy-MM-dd'T'HH:mm:ss'Z'"` format.

Please note that the output will be in the system's default timezone. If you want the output to be in UTC, you can use `ZonedDateTime.now(ZoneOffset.UTC)` instead of `ZonedDateTime.now()`.