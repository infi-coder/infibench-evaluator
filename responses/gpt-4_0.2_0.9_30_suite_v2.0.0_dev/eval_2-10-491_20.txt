Yes, there are several ways to express this in a more idiomatic way in Rust. Here are a few:

1. Using `if let` with a condition:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

2. Using `map_or`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

3. Using `match` with a condition and a catch-all case:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = match foo {
            Some(foo_val) if foo_val >= 5 => Some(foo_val),
            _ => Some(5),
        };
    }
    ```

4. Using `unwrap_or_else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = Some(foo.unwrap_or_else(|| 5));
    }
    ```

5. Using `or_else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.or_else(|| Some(5));
    }
    ```

6. Using `and_then`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.and_then(|foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

Each of these examples does essentially the same thing: if `foo` is `None` or if the value inside `foo` is less than 5, it replaces `foo` with `Some(5)`. Otherwise, it leaves `foo` as it is.