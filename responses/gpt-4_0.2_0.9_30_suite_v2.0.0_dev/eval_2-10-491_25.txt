Yes, there are more idiomatic ways to express the same logic in Rust. Here are a few alternatives:

1. **Using `if let` with a condition:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

2. **Using `map_or` method:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
    }
    ```

3. **Using `match` with a condition (a bit different from your original code):**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = match foo {
            Some(foo_val) if foo_val >= 5 => Some(foo_val),
            _ => Some(5),
        };
    }
    ```

4. **Using `unwrap_or_else` method:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = Some(foo.unwrap_or_else(|| 5));
    }
    ```

5. **Using `or_else` method:**

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.or_else(|| Some(5));
    }
    ```

Please note that the idiomatic way can vary depending on the specific use case and the context in which the code is used.