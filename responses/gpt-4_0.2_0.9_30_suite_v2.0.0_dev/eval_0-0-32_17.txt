You can use the `react-intersection-observer` npm package to detect when an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

Here's how you can use it:

1. First, install the package using npm:

```bash
npm install react-intersection-observer
```

2. Then, import the `useInView` hook from the package in your component:

```javascript
import { useInView } from 'react-intersection-observer';
```

3. Use the hook in your component to get a `ref` that you can attach to the divs. The hook will return a boolean `inView` that tells you whether the div is in the viewport or not:

```javascript
const [ref, inView] = useInView({
    triggerOnce: false, // Change to true if you want to detect only once
});

// Then in your JSX
<div id="parent">
    {data.map(item => {
        const [ref, inView] = useInView({
            triggerOnce: false,
        });
        return (
            <div id={item.id} ref={ref}>
                {inView ? 'In viewport' : 'Not in viewport'}
            </div>
        );
    })}
</div>
```

In this code, `ref` is a function that you pass to the div's `ref` prop. When the div enters the viewport, `inView` will be `true`, and when it leaves the viewport, `inView` will be `false`.

Please note that the Intersection Observer API is not supported in all browsers, so you might want to include a polyfill for it if you need to support older browsers.