The code you've posted is correct, but the problem might be where you're using `ContentView`. The `@Binding` property wrapper is used to create a two-way binding to a mutable state. If you're not passing a `@State` variable to `ContentView`, the view won't be updated because there's no source of truth.

Here's an example of how you might use `ContentView`:

```swift
struct ParentView: View {
    @State private var isSelected: Bool = false

    var body: some View {
        VStack {
            ContentView(isSelected: $isSelected)
            Text("Current selection: \(isSelected ? "Selected" : "Not Selected")")
        }
    }
}
```

In this example, `ParentView` owns the `@State` variable `isSelected`, and it passes a binding to `ContentView`. When `ContentView` modifies `isSelected`, `ParentView` will be notified and will update its body.