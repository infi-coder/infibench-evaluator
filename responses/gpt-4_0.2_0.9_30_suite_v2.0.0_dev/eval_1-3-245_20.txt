It seems like the issue is with the directory structure and the way you are copying your files into the Docker container. 

Here is a revised version of your Dockerfile:

```Dockerfile
# Use an official Python runtime as a parent image
FROM python:3.8

# Set the working directory in the container to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Make port 8000 available to the world outside this container
EXPOSE 8000

# Run the command to start uvicorn
CMD ["uvicorn", "app.main:app", "--host=0.0.0.0", "--port", "8000"]
```

This Dockerfile assumes that your `requirements.txt` is in the same directory as your Dockerfile. If it's not, you'll need to adjust the `COPY` command accordingly.

Also, note that I removed the `--reload` option from the `CMD` command. This is because the `--reload` option is for development use. It allows the server to restart after code changes. This is not typically used in a production environment, which is what Docker is often used for. If you want to keep the `--reload` option, you can add it back in.