Yes, Go modules support this kind of workflow. Here's an example Dockerfile that takes advantage of Docker's layer caching for Go module dependencies:

```Dockerfile
# Start from the latest golang base image
FROM golang:1.11-alpine as builder

# Add Maintainer Info
LABEL maintainer="Your Name <youremail@domain.com>"

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

######## Start a new stage from scratch #######
FROM alpine:latest  

RUN apk --no-cache add ca-certificates

WORKDIR /root/

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/main .

# Expose port 8080 to the outside world
EXPOSE 8080

#Command to run the executable
CMD ["./main"] 
```

In this Dockerfile, the `go.mod` and `go.sum` files are copied over and `go mod download` is run. This downloads all the dependencies specified in `go.mod` and `go.sum`, and this layer will be cached by Docker as long as `go.mod` and `go.sum` don't change.

Then, the rest of the source code is copied over and the application is built. This layer will be rebuilt every time the source code changes, but the dependencies will be cached unless `go.mod` or `go.sum` changes.