You can use the `pkg_resources` module to get the installed version of a package, and the `pip` module to get the latest version available on PyPI. Here is a function that does this:

```python
import pkg_resources
import xmlrpc.client

def checkVersion(pkgName):
    pypi = xmlrpc.client.ServerProxy('https://pypi.org/pypi')
    available = pypi.package_releases(pkgName)
    if not available:  # package not found
        return False

    available = available[0]  # get the latest version number
    installed = pkg_resources.get_distribution(pkgName).version

    return installed == available
```

This function first connects to PyPI and gets the list of available versions for the package. If the package is not found, it returns `False`. Then it gets the latest version number and the installed version number, and compares them. If they are equal, it returns `True`, otherwise it returns `False`.

Please note that this function assumes that the package is already installed. If the package is not installed, `pkg_resources.get_distribution(pkgName)` will raise a `DistributionNotFound` exception. You may want to add error handling code to deal with this situation.