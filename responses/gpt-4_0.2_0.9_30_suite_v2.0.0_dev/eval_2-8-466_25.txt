You can use the `gin.WrapH` function to wrap the Prometheus HTTP handler. Here is how you can modify the main function to use the Gin framework:

```go
package main

import (
    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
        Name: "cpu_temperature_celsius",
        Help: "Current temperature of the CPU.",
    })

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new gin router
    r := gin.Default()

    // Use gin.WrapH to wrap the promhttp handler
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    // Start the gin server
    r.Run(":8080")
}
```

In this code, `gin.WrapH(promhttp.Handler())` wraps the Prometheus HTTP handler into a Gin handler. The Gin server is then started on port 8080.