In Rust, you cannot create an empty `TcpStream` directly. However, you can use `Option<TcpStream>` instead. This way, you can set the `conn` field to `None` initially and then set it to `Some(stream)` when you connect.

Here's how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this code, `conn` is an `Option<TcpStream>`. It is set to `None` in `new` and then set to `Some(stream)` in `connect`. This allows you to represent the absence of a value (before connection) and the presence of a value (after connection).