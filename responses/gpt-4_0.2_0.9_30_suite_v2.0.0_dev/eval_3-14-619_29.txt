The issue is that `@Binding` does not own the state, it just references it. In your case, `ContentView` is not the owner of `isSelected`, so it cannot change it. 

You should use `@State` in the owner view and pass it as `@Binding` to the child view. Here is an example:

```swift
import SwiftUI

struct ParentView: View {
    @State private var isSelected: Bool = false

    var body: some View {
        ContentView(isSelected: $isSelected)
    }
}

struct ContentView: View {
    @Binding var isSelected: Bool

    var body: some View {
        Button(action: {
            self.isSelected.toggle()
        }) {
            Text(isSelected ? "Selected" : "Not Selected")
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ParentView()
    }
}
```

In this example, `ParentView` is the owner of `isSelected` and it passes it to `ContentView` as a `@Binding`. Now, when you click the button in `ContentView`, it will toggle `isSelected` and the view will update.