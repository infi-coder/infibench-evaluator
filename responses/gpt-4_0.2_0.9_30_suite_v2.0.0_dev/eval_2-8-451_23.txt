Yes, Go modules support this kind of workflow. Here's how you can do it:

1. Copy your `go.mod` and `go.sum` files into the Docker image:

    ```Dockerfile
    COPY go.mod go.sum ./
    ```

2. Download the dependencies:

    ```Dockerfile
    RUN go mod download
    ```

3. Copy the rest of your source code into the image and build your application:

    ```Dockerfile
    COPY . .
    RUN go build -o myapp
    ```

Here's a full example of a Dockerfile:

```Dockerfile
# Start from the latest golang base image
FROM golang:latest

# Add Maintainer Info
LABEL maintainer="Your Name <your.email@example.com>"

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN go build -o main .

# Expose port 8080 to the outside world
EXPOSE 8080

# Command to run the executable
CMD ["./main"]
```

This Dockerfile will take advantage of Docker's layer caching: as long as your `go.mod` and `go.sum` files don't change, Docker will use the cached layer with the downloaded dependencies, instead of re-downloading them every time you build your image.