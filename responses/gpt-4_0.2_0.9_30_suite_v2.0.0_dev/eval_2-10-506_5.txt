You can use the `iter()` method to create an iterator over the vector, and then use the `min()` method to find the minimum value. Here is an example:

```rust
let v = vec![5, 6, 8, 4, 2, 7];
let min = v.iter().min();

match min {
    Some(min) => println!("The minimum value is {}", min),
    None => println!("The vector is empty"),
}
```

In this code, `v.iter().min()` returns an `Option<&i32>`. If the vector is empty, `min()` returns `None`. Otherwise, it returns `Some(&min_value)`. The `match` statement is used to handle both cases.

Note that `min()` returns a reference to the minimum value, not the value itself. If you want the value itself, you can dereference it using `*`. However, you need to be sure that the `Option` is `Some` before you do this, otherwise your program will panic.