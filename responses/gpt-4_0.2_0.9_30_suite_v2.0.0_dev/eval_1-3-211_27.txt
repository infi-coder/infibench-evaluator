Sure, you can use the `groupby` and `cumsum` functions from pandas to achieve this. Here is the function:

```python
def aggregation(df):
    # Convert the 'value' column to numeric
    df['value'] = pd.to_numeric(df['value'])
    
    # Create a new column 'balance' where 'type' is 'deposit', else NaN
    df['balance'] = df.loc[df['type'] == 'deposit', 'value']
    
    # Group by 'exchange' and calculate the cumulative sum, forward-filling NaN values
    df['balance'] = df.groupby('exchange')['balance'].cumsum().ffill()
    
    return df
```

This function first converts the 'value' column to numeric type. Then, it creates a new column 'balance' where it copies the 'value' if 'type' is 'deposit', else it sets the value to NaN. After that, it groups the DataFrame by 'exchange' and calculates the cumulative sum of 'balance' within each group. The `ffill` function is used to forward-fill NaN values with the last observed non-NaN value.

You can call this function with your DataFrame as the argument:

```python
df = aggregation(df)
```

After this, `df` will have the 'balance' column as you described.