In Rust, you can't have a "null" or "empty" value for a non-optional type. The `TcpStream` struct does not have a "default" or "empty" value. 

The idiomatic way to handle this in Rust is to use the `Option` enum, which can either be `Some(TcpStream)` or `None`. 

Here is how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self, ip: &str, port: &str) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this code, `conn` is initially set to `None` in the `new` method. When the `connect` method is called, `conn` is set to `Some(TcpStream)` if the connection is successful. 

You will need to handle the `None` case whenever you use `conn`. You can do this using the `match` statement or the `unwrap` method, which will panic if `conn` is `None`.