Sure, here is a function `keys_and_prices(raw_obj)` that does exactly what you want:

```javascript
function keys_and_prices(raw_obj) {
    let keys = Object.keys(raw_obj);
    let prices = keys.map(key => raw_obj[key].price);
    return [keys, prices];
}
```

This function first uses `Object.keys()` to get an array of keys from the input object. Then it uses `Array.prototype.map()` to create a new array of prices corresponding to each key. Finally, it returns an array containing the keys array and the prices array.

You can use this function with your example like this:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the `==` operator in JavaScript performs type coercion if the types of the two variables being compared are different. If you want to check for both type and value equality, you should use the `===` operator. However, for array comparison, you might want to convert them to string before comparison, like `JSON.stringify(ret[0]) === JSON.stringify(["milk", "bread", "potato"])`.