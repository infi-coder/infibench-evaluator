Sure, you can achieve this using the `groupby`, `apply`, and `fillna` methods from pandas. Here's how you can do it:

```python
def aggregation(df):
    # Convert 'value' column to numeric
    df['value'] = pd.to_numeric(df['value'])

    # Create a new column 'balance' where 'type' is 'deposit', else NaN
    df['balance'] = df.loc[df['type'] == 'deposit', 'value']

    # Group by 'exchange' and calculate the cumulative sum of 'balance'
    df['balance'] = df.groupby('exchange')['balance'].cumsum()

    # Forward fill NaN values in 'balance'
    df['balance'] = df['balance'].fillna(method='ffill')

    return df
```

This function first converts the 'value' column to numeric. Then it creates a new column 'balance' where it copies the 'value' if 'type' is 'deposit', else it puts NaN. After that, it groups the DataFrame by 'exchange' and calculates the cumulative sum of 'balance'. Finally, it forward fills the NaN values in 'balance'.