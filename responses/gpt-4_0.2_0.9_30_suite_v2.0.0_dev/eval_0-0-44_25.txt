To create an index in Mongoose schema using Nest.js, you can use the `@Prop` decorator with the `index` option set to `true` as you have done. However, you also need to ensure that the indexes are actually created in MongoDB.

This can be done by calling the `init()` method on the model. The `init()` method is a Mongoose method that ensures the indexes in your schema are created in MongoDB.

Here is how you can do it:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(@InjectModel(Schema.name) private readonly myModel: Model<Schema>) {}

  async onModuleInit(): Promise<void> {
    await this.myModel.init();
  }
}
```

In this code, `MyService` implements the `OnModuleInit` interface, which means it has an `onModuleInit()` method that will be called when the Nest.js module containing this service is initialized. Inside this method, we call `this.myModel.init()`, which ensures that the indexes defined in the schema are created in MongoDB.

Remember to replace `Schema` and `MyService` with your actual schema and service names.

Also, ensure that the `MyService` is imported in a module that is loaded at application startup, so that the `onModuleInit()` method is called.