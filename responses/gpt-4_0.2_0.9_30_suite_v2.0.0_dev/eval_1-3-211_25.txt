Sure, you can achieve this by using the `groupby` and `cumsum` functions provided by pandas. Here is the function:

```python
def aggregation(df):
    # Convert the 'value' column to numeric
    df['value'] = pd.to_numeric(df['value'])

    # Create a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit'
    df['balance'] = df[df['type'] == 'deposit'].groupby('exchange')['value'].cumsum()

    # Forward fill the 'balance' column
    df['balance'] = df['balance'].fillna(method='ffill')

    # If there are still NaN values (because the first row(s) of an exchange is not a deposit), fill with 0
    df['balance'] = df['balance'].fillna(0)

    return df
```

This function first converts the 'value' column to numeric type. Then it creates a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit', grouped by 'exchange'. It then forward fills the 'balance' column to fill any NaN values. If there are still NaN values (because the first row(s) of an exchange is not a deposit), it fills these with 0.