Yes, Go modules support this kind of workflow. Here's how you can do it:

First, you need to copy your `go.mod` and `go.sum` files into the Docker image. These files serve as your "dependency manifest" in Go modules.

Then, you can download your dependencies using the `go mod download` command. This command downloads all dependencies specified in your `go.mod` and `go.sum` files and caches them in the Docker image.

Finally, you can copy your application code into the Docker image and build your application. Because the dependencies are already downloaded and cached in the Docker image, this step will be much faster if only your application code has changed.

Here's a sample Dockerfile that demonstrates this:

```Dockerfile
# Start from the latest golang base image
FROM golang:latest

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN go build -o main .

# Expose port 8080 to the outside world
EXPOSE 8080

# Command to run the executable
CMD ["./main"]
```

This Dockerfile takes advantage of Docker's layer caching: if your `go.mod` and `go.sum` files don't change, then the `go mod download` command won't be run again on subsequent builds.