In Rust, you can't create an instance of `TcpStream` without connecting to a server. This is because `TcpStream` represents a live TCP connection, and there's no such thing as a "default" or "empty" TCP connection.

Instead, you can use `Option<TcpStream>` for the `conn` field. This allows the `conn` field to be `None` until a connection is established.

Here is how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this code, `conn` is initially `None`. When `connect` is called, a `TcpStream` is created and stored in `conn` as `Some(c)`. If the connection fails, the program will panic. You might want to handle this error more gracefully in a real program.