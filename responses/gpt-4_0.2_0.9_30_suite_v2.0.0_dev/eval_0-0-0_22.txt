Sure, here is a function that does what you want:

```javascript
function keys_and_prices(raw_obj) {
    let keys = Object.keys(raw_obj);
    let prices = keys.map(key => raw_obj[key].price);
    return [keys, prices];
}
```

This function first extracts the keys from the input object using `Object.keys()`. Then it maps over these keys, using each key to access the corresponding `price` field in the original object. Finally, it returns an array containing the keys and prices arrays.

Here is how you can use it:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the `==` operator in JavaScript does not compare the contents of arrays, but their references. So, `assert(ret[0] == ["milk", "bread", "potato"])` and `assert(ret[1] == [20, 15, 10])` will not work as expected. Instead, you can use `JSON.stringify()` to compare the contents of the arrays:

```javascript
assert(JSON.stringify(ret[0]) === JSON.stringify(["milk", "bread", "potato"]))
assert(JSON.stringify(ret[1]) === JSON.stringify([20, 15, 10]))
```