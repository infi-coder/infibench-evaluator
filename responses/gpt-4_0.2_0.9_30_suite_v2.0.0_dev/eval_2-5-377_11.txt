The problem you're encountering is because you're trying to format a `LocalDate` object using `SimpleDateFormat` which is meant for `java.util.Date` objects. 

To solve this, you should use `java.time` classes, which are more modern and easier to use than the old `java.util` date and time classes. 

Here is how you can generate a random date and time, and format it to the `"yyyy-MM-dd'T'HH:mm:ss'Z'"` format:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneId.systemDefault()).format(formatter);
    }
}
```

In this code, `LocalDateTime.now().minusDays(new Random().nextInt(365 * 70))` generates a random date and time in the past 70 years. 

`DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'")` creates a formatter with the desired format.

`dateTime.atZone(ZoneId.systemDefault()).format(formatter)` converts the `LocalDateTime` to a `ZonedDateTime` with the system's default time zone, and then formats it to a string.

Please note that `'Z'` in the date-time format stands for the Zulu time zone, which is equivalent to UTC. If you want to represent the date-time in the Zulu time zone, you should convert the `LocalDateTime` to a `ZonedDateTime` with the UTC time zone:

```java
return dateTime.atZone(ZoneId.of("UTC")).format(formatter);
```