The problem you're encountering is due to the fact that you're trying to format a `LocalDate` object, which only contains date information (year, month, day), not time information (hour, minute, second). Therefore, you cannot format it with a date-time format that includes time components.

To solve this problem, you should use `ZonedDateTime` or `LocalDateTime` instead of `LocalDate`. Here is a corrected version of your code:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneId.systemDefault()).format(dateFormat);
    }
}
```

In this code, `LocalDateTime.now().minusDays(new Random().nextInt(365 * 70))` generates a random date and time within the past 70 years. `DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'")` is used to format the date and time. `dateTime.atZone(ZoneId.systemDefault())` converts the `LocalDateTime` to a `ZonedDateTime` with the system's default time zone, which is necessary because the 'Z' in your format stands for the time zone.

Please note that the 'Z' in the format stands for the Zulu time zone (UTC+0). If you want the date-time string to reflect the system's current time zone, you should replace 'Z' with 'XXX' in the format string.