In Rust, you can't create an empty `TcpStream` object directly. Instead, you can use `Option<TcpStream>` for the `conn` field in your struct. This allows you to set the `conn` field to `None` initially, and then set it to `Some(TcpStream)` when you connect.

Here is how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this code, `conn` is initialized as `None` in the `new` method. Then, in the `connect` method, `conn` is set to `Some(c)` if the connection is successful. If the connection fails, the program will panic.