Sure, here is a function that does exactly what you want:

```javascript
function keys_and_prices(raw_obj) {
    let keys = Object.keys(raw_obj);
    let prices = keys.map(key => raw_obj[key].price);
    return [keys, prices];
}
```

This function first extracts the keys from the object using `Object.keys()`. Then it maps over these keys and for each key, it retrieves the corresponding `price` value from the original object. Finally, it returns an array containing the keys and prices arrays.

You can use it like this:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the order of keys in JavaScript objects is not guaranteed, so the order of keys and prices in the returned arrays may not be the same as in your example. If you need to maintain a specific order, you might need to sort the keys array before mapping it to prices.