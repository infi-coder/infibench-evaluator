You can use the `gin.WrapH` function to wrap the Prometheus HTTP handler into a Gin handler. Here's how you can modify the main function to use the Gin framework:

```go
package main

import (
    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
        Name: "cpu_temperature_celsius",
        Help: "Current temperature of the CPU.",
    })

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    r := gin.Default()

    // Wrap the promhttp handler into a Gin handler using gin.WrapH
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    r.Run(":8080") // listen and serve on 0.0.0.0:8080
}
```

In this code, `r.GET("/metrics", gin.WrapH(promhttp.Handler()))` sets up the `/metrics` endpoint to serve the Prometheus metrics using the Gin framework.