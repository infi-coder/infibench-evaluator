You can use the `react-intersection-observer` npm package to check if an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `InView` component from the package to wrap your divs. Here's an example of how you might use it:

```javascript
import React from 'react';
import { InView } from 'react-intersection-observer';

const ParentComponent = ({ data }) => {
  return (
    <div id="parent">
      {data.map(item => (
        <InView key={item.id}>
          {({ inView, ref, entry }) => (
            <div id={item.id} ref={ref}>
              {inView ? 'In viewport' : 'Not in viewport'}
              {item.title}
            </div>
          )}
        </InView>
      ))}
    </div>
  );
};

export default ParentComponent;
```

In this example, the `InView` component wraps each div. It provides a `ref` that you should pass to your div, and a `inView` boolean that tells you whether the div is in the viewport. You can use this boolean to conditionally render different content based on whether the div is in the viewport.

Please note that the Intersection Observer API is not supported in all browsers. If you need to support a browser that doesn't have this API, you might need to use a polyfill.