Here is a function `mySplit` that uses the `strsplit` function to split the strings in the `col1` column of the dataframe `df`. It then uses the `sapply` function to apply the `strsplit` function to each element of the `col1` column. The `do.call` function is used to combine the results into a dataframe.

```r
mySplit <- function(df) {
  # Split the strings in the 'col1' column by comma
  split_by_comma <- strsplit(df$col1, ",")
  
  # Split each element of 'split_by_comma' by colon
  split_by_colon <- lapply(split_by_comma, function(x) strsplit(x, ":"))
  
  # Extract the values (i.e., the second elements of the 'split_by_colon' lists)
  values <- lapply(split_by_colon, function(x) sapply(x, function(y) y[2]))
  
  # Combine the 'values' lists into a dataframe
  df_new <- do.call(rbind, values)
  
  # Set the column names of 'df_new'
  colnames(df_new) <- c("name", "Age", "City")
  
  return(df_new)
}
```

You can use this function as follows:

```r
# Create a dataframe
df <- data.frame(col1 = c("name:Michael,Age:31,City:NYC", "name:Tom,Age:25,City:NA"))

# Split the 'col1' column into separate columns
df_new <- mySplit(df)

# Print the new dataframe
print(df_new)
```

This will print:

```r
     name Age City
[1,] "Michael" "31" "NYC"
[2,] "Tom"     "25" "NA"
```

Please note that the values in the new dataframe are character strings. If you want to convert the 'Age' column to numeric, you can do so using the `as.numeric` function:

```r
df_new$Age <- as.numeric(df_new$Age)
```