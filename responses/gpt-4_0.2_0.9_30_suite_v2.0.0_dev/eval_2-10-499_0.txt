In Rust, you can't have an uninitialized or empty value for a field in a struct. All fields must be initialized when creating an instance of the struct. 

In your case, you can use `Option<TcpStream>` for the `conn` field. `Option` is an enum in Rust that can either be `Some(value)` or `None`. This way, you can set `conn` to `None` in the `new` method and then set it to `Some(TcpStream)` in the `connect` method.

Here is how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

Now, whenever you want to use `conn`, you will have to check if it's `Some(TcpStream)` or `None` and handle each case appropriately.