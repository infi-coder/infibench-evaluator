The reason why you're seeing the log "2" before "1" is because of the asynchronous nature of the `onItemSelectedListener`. The `onItemSelected` function is not immediately executed when you set the listener. It only gets executed when an item is selected in the spinner, which is likely to happen after the function `setupListWithAdapter` has already returned.

This is why you're seeing the log "2" (which is at the end of `setupListWithAdapter`) before the log "1" (which is inside `onItemSelected`).

As for returning the selected item from the function, it's not possible to directly return the selected item because of the asynchronous nature of the listener. You can't return a value from `setupListWithAdapter` that is determined by a future event (the item selection).

Instead, you could use a callback function to handle the selected item. Here's an example:

```kotlin
fun Spinner.setupListWithAdapter(list: MutableList<String>, callback: (String) -> Unit) {
    val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, list)
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
    this.adapter = adapter
    this.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
        override fun onItemSelected(p0: AdapterView<*>?, p1: View?, p2: Int, p3: Long) {
            val itemSelected = list[p2]
            Log.e("categoryLog","1 : " + itemSelected)
            callback(itemSelected)
        }
        override fun onNothingSelected(p0: AdapterView<*>?) {
        }
    }
}
```

Then, when you call `setupListWithAdapter`, you can provide a lambda function to handle the selected item:

```kotlin
mySpinner.setupListWithAdapter(myList) { selectedItem ->
    // Do something with selectedItem
}
```

This way, you can handle the selected item as soon as it's selected in the spinner.