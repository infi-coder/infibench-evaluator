Yes, there are several ways to express this in a more idiomatic way in Rust. Here are a few examples:

1. Using `if let` with a condition:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = foo {
        if foo_val < 5 {
            foo.replace(5);
        }
    } else {
        foo.replace(5);
    }
}
```

2. Using `match` with a tuple:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    match (foo, foo.filter(|&x| x >= 5)) {
        (None, _) | (Some(_), None) => { foo.replace(5); }
        _ => {}
    }
}
```

3. Using `map_or`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(5) } else { Some(foo_val) });
}
```

4. Using `unwrap_or_else`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = Some(foo.unwrap_or_else(|| 5));
}
```

5. Using `or_else`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.or_else(|| Some(5));
}
```

6. Using `get_or_insert`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo.get_or_insert(5);
}
```

All of these examples do the same thing: they replace the value of `foo` with `5` if `foo` is `None` or if the value of `foo` is less than `5`.