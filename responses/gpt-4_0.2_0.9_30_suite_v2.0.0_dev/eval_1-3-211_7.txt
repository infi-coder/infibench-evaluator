Sure, you can achieve this by using the `groupby`, `apply`, and `cumsum` functions provided by pandas. Here is the function you requested:

```python
def aggregation(df):
    # Convert the 'value' column to numeric
    df['value'] = pd.to_numeric(df['value'])

    # Create a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit'
    df['balance'] = df[df['type'] == 'deposit'].groupby('exchange')['value'].cumsum()

    # Forward fill the 'balance' column
    df['balance'] = df.groupby('exchange')['balance'].ffill()

    # Fill NaN values with 0
    df['balance'] = df['balance'].fillna(0)

    return df
```

This function first converts the 'value' column to numeric. Then it creates a new column 'balance' which is the cumulative sum of 'value' where 'type' is 'deposit'. The `groupby` function is used to perform this operation separately for each 'exchange'. Then it forward fills the 'balance' column within each 'exchange' group. Finally, it fills any remaining NaN values with 0.