You can use the factory pattern to create different instances of `ServiceBusClient` and `ServiceBusSender` with different queue names. Here's an example of how you can do it:

First, create a factory interface and its implementation:

```csharp
public interface IServiceBusClientFactory
{
    ServiceBusSender CreateSender(string queueName);
}

public class ServiceBusClientFactory : IServiceBusClientFactory
{
    private readonly string _connectionString;

    public ServiceBusClientFactory(string connectionString)
    {
        _connectionString = connectionString;
    }

    public ServiceBusSender CreateSender(string queueName)
    {
        var client = new ServiceBusClient(_connectionString);
        return client.CreateSender(queueName);
    }
}
```

Then, register the factory in your DI container:

```csharp
_services.AddSingleton<IServiceBusClientFactory>(new ServiceBusClientFactory(serviceBusConfiguration.ServiceBusConnectionString));
```

Now, you can inject the factory into your service and create `ServiceBusSender` instances with different queue names:

```csharp
public class CarReservationMessagingService
{
    private readonly IServiceBusClientFactory _factory;

    public CarReservationMessagingService(IServiceBusClientFactory factory)
    {
        _factory = factory;
    }

    public async Task PublishNewCarReservationMessageAsync(CarReservation carReservation, string queueName)
    {
        var sender = _factory.CreateSender(queueName);
        // ...
        await sender.SendMessageAsync(message);
    }
}
```

In this way, you can create `ServiceBusSender` instances for different queues as needed. You can pass the queue name as a parameter to the `PublishNewCarReservationMessageAsync` method, or determine it in some other way depending on your application logic.