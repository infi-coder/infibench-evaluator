Yes, Go modules support this kind of workflow. Here's how you can do it:

1. Copy your `go.mod` and `go.sum` files into the Docker container.

```Dockerfile
COPY go.mod go.sum ./
```

2. Download the dependencies. This will use the `go mod download` command, which downloads all dependencies specified in your `go.mod` and `go.sum` files.

```Dockerfile
RUN go mod download
```

3. Copy the rest of your application code into the Docker container and build your application. Because the dependencies are already downloaded, this step will be faster.

```Dockerfile
COPY . .
RUN go build -o myapp
```

Here's a full example of a Dockerfile:

```Dockerfile
# Start from the latest golang base image
FROM golang:latest

# Add Maintainer Info
LABEL maintainer="Your Name <your.email@example.com>"

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN go build -o main .

# This container exposes port 8080 to the outside world
EXPOSE 8080

# Run the binary program produced by `go install`
CMD ["./main"]
```

This Dockerfile will take advantage of Docker's layer caching. The `go mod download` step will be cached until your `go.mod` or `go.sum` files change.