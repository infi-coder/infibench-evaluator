The comment is partially correct. 

In object-oriented programming, a constructor is a special type of subroutine called to create an object. It prepares the new object for use, often accepting arguments that the constructor uses to set required member variables. 

The part of the comment that is correct is that a constructor is invoked automatically when a new object is created. This is a fundamental feature of many object-oriented programming languages.

However, the part of the comment stating that "a constructor cannot be called, it is not a function" is not entirely accurate. While it's true that constructors are not regular functions that you can call whenever you want, they are still functions in the sense that they contain executable code. The difference is in how and when they are called. Constructors are automatically called upon object creation, and you cannot call them in the same way as regular functions after the object has been created.

In some languages like JavaScript, you can call a constructor directly using the `new` keyword. For example:

```javascript
function MyClass() {
  // constructor body
}

var instance = new MyClass(); // Here we're calling the constructor
```

In other languages like Java or C++, the constructor is called when you instantiate a new object:

```java
public class MyClass {
  public MyClass() {
    // constructor body
  }
}

MyClass instance = new MyClass(); // Here we're calling the constructor
```

So, while the user's comment is partially correct, it's important to understand that constructors are indeed special types of functions that are called when a new object is instantiated.