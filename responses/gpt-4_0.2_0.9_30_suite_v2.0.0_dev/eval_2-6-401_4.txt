To inject multiple `ServiceBusClient` instances with the same connection string but different queue names, you can use a factory pattern. This pattern allows you to create instances of `ServiceBusClient` based on the queue name.

First, create a factory interface:

```csharp
public interface IServiceBusClientFactory
{
    ServiceBusSender CreateSender(string queueName);
}
```

Then, implement this interface:

```csharp
public class ServiceBusClientFactory : IServiceBusClientFactory
{
    private readonly string _connectionString;

    public ServiceBusClientFactory(string connectionString)
    {
        _connectionString = connectionString;
    }

    public ServiceBusSender CreateSender(string queueName)
    {
        var client = new ServiceBusClient(_connectionString);
        return client.CreateSender(queueName);
    }
}
```

Now, you can register this factory in your DI container:

```csharp
_services.AddSingleton<IServiceBusClientFactory>(new ServiceBusClientFactory(serviceBusConfiguration.ServiceBusConnectionString));
```

Finally, you can inject the factory into your service and use it to create `ServiceBusSender` instances:

```csharp
public class CarReservationMessagingService
{
    private readonly IServiceBusClientFactory _factory;

    public CarReservationMessagingService(IServiceBusClientFactory factory)
    {
        _factory = factory;
    }

    public async Task PublishNewCarReservationMessageAsync(CarReservation carReservation, string queueName)
    {
        var sender = _factory.CreateSender(queueName);
        // ...
        await sender.SendMessageAsync(message);
    }
}
```

This way, you can create a `ServiceBusSender` for any queue by providing the queue name to the `PublishNewCarReservationMessageAsync` method.