Sure, here is a recursive function that will traverse the tree and return the object with the matching `id`.

```javascript
function findObject(id, root_node) {
    if (root_node.id === id) {
        return root_node;
    }
    for (let i = 0; i < root_node.child.length; i++) {
        let found = findObject(id, root_node.child[i]);
        if (found) {
            return found;
        }
    }
}
```

This function works by first checking if the `id` of the `root_node` matches the `id` we're looking for. If it does, it returns the `root_node`.

If the `id` doesn't match, it iterates over the `child` array of the `root_node` and recursively calls `findObject` on each child. If a match is found in the subtree, it returns the found object. If no match is found, it continues to the next child.

If no match is found in any of the subtrees, the function will return `undefined`.