In Rust, you cannot set a field in a struct to an "empty" value if the field's type doesn't have a concept of an "empty" value. In your case, `TcpStream` does not have a default value or an "empty" state.

One common solution to this problem is to use `Option<TcpStream>`. This allows you to set the `conn` field to `None` initially, and then `Some(TcpStream)` when you actually have a connection.

Here is how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

Now, `conn` is an `Option<TcpStream>`, which means it can be `None` (no value) or `Some(TcpStream)` (has a value). In the `new` method, you set `conn` to `None`, and in the `connect` method, you set `conn` to `Some(c)` when you successfully create a `TcpStream`.