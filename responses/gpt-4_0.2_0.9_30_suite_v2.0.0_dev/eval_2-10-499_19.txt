In Rust, you can't create an empty `TcpStream` directly. Instead, you can use `Option<TcpStream>` for the `conn` field. The `Option` enum has two variants: `Some` and `None`. `None` is used when there is no value, and `Some` is used when there is a value.

Here is how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this code, `conn` is initially set to `None` in the `new` method. In the `connect` method, `conn` is set to `Some(c)` when the connection is successful.