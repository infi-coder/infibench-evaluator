You can use the `react-intersection-observer` npm package to determine if a div is visible in the viewport. This package uses the Intersection Observer API to check if an element is in the viewport and provides a React Hook to use this functionality in your components.

First, install the package using npm:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from this package in your component. Here's an example of how you can use it:

```jsx
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = ({ data }) => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the event to be triggered only once
  });

  return (
    <div id="parent">
      {data.map((item) => {
        const [ref, inView] = useInView({
          triggerOnce: false,
        });

        return (
          <div ref={ref} id={item.id}>
            {inView ? item.title : 'Not in view'}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this example, `useInView` returns a `ref` and a boolean `inView`. You attach the `ref` to the div you want to observe, and `inView` will be `true` if the div is in the viewport and `false` otherwise.

Please note that the Intersection Observer API is not supported in all browsers. You may need to include a polyfill for full compatibility.