Yes, there are several ways to express this in a more idiomatic way in Rust. Here are a few examples:

1. Using `if let` with a condition:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let Some(foo_val) = foo {
            if foo_val < 5 {
                // Do nothing
            } else {
                foo.replace(5);
            }
        } else {
            foo.replace(5);
        }
    }
    ```

2. Using `map_or`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(foo_val) } else { Some(5) });
    }
    ```

3. Using `match` with a tuple:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        match (foo, foo.filter(|&foo_val| foo_val < 5)) {
            (Some(_), None) => { foo.replace(5); }
            _ => {}
        }
    }
    ```

4. Using `if let` with `Option::filter`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        if let None = foo.filter(|&foo_val| foo_val < 5) {
            foo.replace(5);
        }
    }
    ```

5. Using `Option::unwrap_or_else`:

    ```rust
    fn main() {
        let mut foo: Option<u8> = None;
        foo = foo.filter(|&foo_val| foo_val < 5).unwrap_or_else(|| 5);
    }
    ```

These are just a few examples, and there are likely other ways to express this as well. The best choice depends on the specifics of your use case and your personal style preferences.