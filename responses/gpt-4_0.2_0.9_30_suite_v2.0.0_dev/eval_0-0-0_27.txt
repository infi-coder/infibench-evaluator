Sure, here is a function that does exactly that:

```javascript
function keys_and_prices(raw_obj) {
    let keys = Object.keys(raw_obj);
    let prices = keys.map(key => raw_obj[key].price);
    return [keys, prices];
}
```

This function first uses `Object.keys()` to get an array of the keys in the object. Then it uses `Array.prototype.map()` to create a new array of the prices corresponding to each key.

Here is how you can use it:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the `==` operator in JavaScript is not strict. It does type coercion. If you want to compare arrays, you should use `JSON.stringify()` to convert them to strings first, or use a library like Lodash's `_.isEqual()` function. Here is an example:

```javascript
console.log(JSON.stringify(ret[0]) === JSON.stringify(["milk", "bread", "potato"])) // true
console.log(JSON.stringify(ret[1]) === JSON.stringify([20, 15, 10])) // true
```