You can use the factory pattern to create multiple instances of `ServiceBusClient` with different queue names. Here's an example of how you can do this:

1. Define a factory interface:

```c#
public interface IServiceBusClientFactory
{
    ServiceBusSender CreateSender(string queueName);
}
```

2. Implement the factory:

```c#
public class ServiceBusClientFactory : IServiceBusClientFactory
{
    private readonly string _connectionString;

    public ServiceBusClientFactory(string connectionString)
    {
        _connectionString = connectionString;
    }

    public ServiceBusSender CreateSender(string queueName)
    {
        var client = new ServiceBusClient(_connectionString);
        return client.CreateSender(queueName);
    }
}
```

3. Register the factory in your DI container:

```c#
_services.AddSingleton<IServiceBusClientFactory>(new ServiceBusClientFactory(serviceBusConfiguration.ServiceBusConnectionString));
```

4. Inject the factory where you need it and use it to create `ServiceBusSender` instances:

```c#
public class CarReservationMessagingService
{
    private readonly ServiceBusSender _serviceBusSender;

    public CarReservationMessagingService(IServiceBusClientFactory factory)
    {
        _serviceBusSender = factory.CreateSender("queueName");
    }

    // ...
}
```

This way, you can create multiple `ServiceBusSender` instances with different queue names using the same `IServiceBusClientFactory` instance. You just need to pass the queue name when calling `CreateSender`.