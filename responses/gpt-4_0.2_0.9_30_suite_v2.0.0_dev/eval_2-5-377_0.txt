The problem is that you're trying to format a `LocalDate` object which doesn't contain time information. You should use `ZonedDateTime` or `LocalDateTime` instead. Also, you should use `DateTimeFormatter` instead of `SimpleDateFormat` because `SimpleDateFormat` is not thread-safe and it doesn't work well with the new Java 8 Date/Time API.

Here is the corrected code:

```java
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        LocalDateTime dateTime = LocalDateTime.now().minusDays(new Random().nextInt(365 * 70));
        System.out.println("date and time :: " + dateTime.toString());
        return formatDate(dateTime);
    }

    public static String formatDate(LocalDateTime dateTime){
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return dateTime.atZone(ZoneId.systemDefault()).format(formatter);
    }
}
```

This code will generate a random date and time in the past 70 years, and format it to the `"yyyy-MM-dd'T'HH:mm:ss'Z'"` format. The `atZone(ZoneId.systemDefault())` part is used to convert `LocalDateTime` to `ZonedDateTime`, because the 'Z' in the format string represents the timezone offset, which is not available in `LocalDateTime`.

Please note that the 'Z' in the format string means Zulu time, which is equivalent to UTC. If you want to format the date and time in UTC, you should replace `ZoneId.systemDefault()` with `ZoneOffset.UTC`.