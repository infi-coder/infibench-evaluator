You can solve this problem by first dividing the number into `n` parts and then distributing the remainder among the parts by adding 2 to each part in succession. Here is a Python function that does this:

```python
def divideNumber(num, n):
    # Calculate the quotient and remainder
    quotient, remainder = divmod(num, n)
    # Initialize the result list with the quotient
    result = [quotient] * n
    # Distribute the remainder among the parts
    i = 0
    while remainder > 0:
        # Add 2 to the current part
        result[i] += 2
        # Subtract 2 from the remainder
        remainder -= 2
        # Move to the next part
        i = (i + 1) % n
    return result
```

You can test this function with your example:

```python
print(divideNumber(100, 3))  # Output: [34, 34, 32]
```

This function works by first dividing the number into `n` equal parts (as much as possible). Then it distributes the remainder among the parts by adding 2 to each part in succession. The `% n` operation ensures that we loop back to the first part after reaching the last part.