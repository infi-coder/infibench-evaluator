You can use the factory pattern to create multiple instances of `ServiceBusSender` with different queue names. Here's an example of how you can do this:

First, create a factory interface:

```csharp
public interface IServiceBusSenderFactory
{
    ServiceBusSender CreateSender(string queueName);
}
```

Then, implement this interface:

```csharp
public class ServiceBusSenderFactory : IServiceBusSenderFactory
{
    private readonly ServiceBusClient _serviceBusClient;

    public ServiceBusSenderFactory(ServiceBusClient serviceBusClient)
    {
        _serviceBusClient = serviceBusClient;
    }

    public ServiceBusSender CreateSender(string queueName)
    {
        return _serviceBusClient.CreateSender(queueName);
    }
}
```

You can then register this factory in your DI container:

```csharp
_services.TryAddSingleton<IServiceBusSenderFactory, ServiceBusSenderFactory>();
```

Now, you can inject `IServiceBusSenderFactory` into your service and create `ServiceBusSender` instances with different queue names:

```csharp
public class CarReservationMessagingService
{
    private readonly IServiceBusSenderFactory _serviceBusSenderFactory;

    public CarReservationMessagingService(IServiceBusSenderFactory serviceBusSenderFactory)
    {
        _serviceBusSenderFactory = serviceBusSenderFactory;
    }

    public async Task PublishNewCarReservationMessageAsync(CarReservation carReservation, string queueName)
    {
        var serviceBusSender = _serviceBusSenderFactory.CreateSender(queueName);

        // ... rest of your code
    }
}
```

This way, you can create a `ServiceBusSender` for any queue name you need.