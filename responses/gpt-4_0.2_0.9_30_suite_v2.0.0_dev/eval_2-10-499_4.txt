In Rust, you cannot create an instance of `TcpStream` without connecting to a server. Therefore, you cannot set a default value for `conn` field in `new` method. 

However, you can use `Option<TcpStream>` instead of `TcpStream` for the `conn` field. This allows you to set the `conn` field to `None` in the `new` method and `Some(TcpStream)` in the `connect` method.

Here is how you can do it:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None,
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c),
            Err(_) => panic!(),
        }
    }
}
```

In this way, you can set the `conn` field to `None` when the `FistClient` is created and then set it to `Some(TcpStream)` when the `connect` method is called.