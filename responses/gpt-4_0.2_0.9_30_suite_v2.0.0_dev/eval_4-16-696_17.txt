The problem is that the command substitution `$(echo {} | sed 's/\?.*//g')` is evaluated before `find` starts executing, so it doesn't have the desired effect. 

You can use a small bash script in the `-exec` part of the `find` command to achieve your goal. Here's how you can do it:

```bash
find . -type f -name '*\?*' -print0 | while IFS= read -r -d '' file; do
    mv -- "$file" "${file%%\?*}"
done
```

This command will find all files in the current directory and its subdirectories that have a `?` in their name. For each such file, it will remove the `?` and everything after it.

Please note that this command will fail if there are multiple files in the same directory that have the same name before the `?`. In such cases, you might want to add some logic to handle duplicates or errors.