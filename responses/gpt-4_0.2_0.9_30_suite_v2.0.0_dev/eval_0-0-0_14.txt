Sure, here is a function that does exactly what you want:

```javascript
function keys_and_prices(raw_obj) {
    var keys = Object.keys(raw_obj);
    var prices = keys.map(key => raw_obj[key].price);
    return [keys, prices];
}
```

This function first uses `Object.keys()` to get an array of keys from the object. Then it uses `Array.prototype.map()` to create a new array of prices, by mapping each key to its corresponding price in the object.

Here is how you can use it:

```javascript
var itemsToBuy = { milk: { quantity : 5, price: 20 }, bread: { quantity : 2, price: 15 }, potato: { quantity : 3, price: 10 } }
let ret = keys_and_prices(itemsToBuy)
console.log(ret[0]) // ["milk", "bread", "potato"]
console.log(ret[1]) // [20, 15, 10]
```

Please note that the `==` operator in JavaScript is not strict and does not compare arrays by their content. If you want to compare arrays by their content, you need to convert them to strings or use a library that provides this functionality. For example, you can use `JSON.stringify()` to convert arrays to strings:

```javascript
assert(JSON.stringify(ret[0]) == JSON.stringify(["milk", "bread", "potato"]))
assert(JSON.stringify(ret[1]) == JSON.stringify([20, 15, 10]))
```