Sure, here is a generator function `iterLeafNodes` that should do the job:

```javascript
function* iterLeafNodes(strhtml, format=[]) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(strhtml, "text/html");
  const walk = function* (node, format) {
    if (node.nodeType === Node.TEXT_NODE) {
      if (node.textContent.trim() !== '') {
        yield {
          text: node.textContent,
          format: format
        };
      }
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      let newFormat = format;
      if (node.tagName.toLowerCase() !== 'p') {
        newFormat = [...format, node.tagName.toLowerCase()];
      }
      for (const child of node.childNodes) {
        yield* walk(child, newFormat);
      }
    }
  };
  for (const child of doc.body.childNodes) {
    yield* walk(child, format);
  }
}
```

This function uses a recursive generator function `walk` to traverse the DOM tree. It checks the type of each node and if it's a text node, it yields an object with the text and the current format. If it's an element node, it adds the tag name to the format (if it's not a paragraph tag) and recursively walks the child nodes.