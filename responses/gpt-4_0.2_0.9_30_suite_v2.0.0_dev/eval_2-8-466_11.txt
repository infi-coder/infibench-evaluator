You can use the `gin.WrapH` function to wrap the Prometheus HTTP handler into a Gin handler. Here's how you can modify your main function to use Gin:

```go
package main

import (
    "github.com/gin-gonic/gin"
    "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"
)

var cpuTemp = prometheus.NewGauge(prometheus.GaugeOpts{
        Name: "cpu_temperature_celsius",
        Help: "Current temperature of the CPU.",
    })

func init() {
    // Metrics have to be registered to be exposed:
    prometheus.MustRegister(cpuTemp)
}

func main() {
    cpuTemp.Set(65.3)

    // Create a new Gin router
    r := gin.Default()

    // Use the Gin wrapper function to convert the Prometheus HTTP handler
    // to a Gin handler and register it at the "/metrics" endpoint
    r.GET("/metrics", gin.WrapH(promhttp.Handler()))

    // Start the Gin server
    r.Run(":8080")
}
```

This code will start a Gin server on port 8080 and expose the Prometheus metrics at the "/metrics" endpoint.