To create an index in Mongoose schema using Nest.js, you can use the `@Prop` decorator with the `index` option set to `true`. However, you need to ensure that the indexes are actually created in MongoDB. This can be done by calling the `init()` method on the model.

Here's how you can do it:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(@InjectModel('Schema') private readonly myModel: Model<Schema>) {}

  async onModuleInit(): Promise<void> {
    await this.myModel.init();
  }
}
```

In this code, `MyService` implements the `OnModuleInit` interface. The `onModuleInit()` method is a lifecycle hook method provided by Nest.js, which is called when the module is fully initialized. Inside this method, we call the `init()` method on the Mongoose model. This ensures that the indexes are created in MongoDB when the application starts.

Remember to replace `'Schema'` with the actual name of your schema.

Also, make sure that you have the correct connection to your MongoDB database. If the connection is not correct, the indexes will not be created.