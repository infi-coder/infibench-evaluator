You can achieve this by creating a dictionary where the keys are the first four elements of `b` and the values are the elements in `rest`. Then, you can iterate over the `last` list and replace the elements if they are in the dictionary. Here is the function:

```python
def ReplaceElementsByIndex(rest, b, last):
    replace_dict = dict(zip(b[:4], rest))
    return [replace_dict.get(i, i) for i in last]
```

This function works as follows:

1. `dict(zip(b[:4], rest))` creates a dictionary where the keys are the first four elements of `b` and the values are the elements in `rest`.
2. `[replace_dict.get(i, i) for i in last]` is a list comprehension that iterates over the `last` list. For each element `i`, it gets the value from the dictionary if `i` is a key in the dictionary (`replace_dict.get(i)`), otherwise it keeps the original value (`i`). This is done by the `get` method of the dictionary, which returns the value for a key if it exists in the dictionary, otherwise it returns a default value. In this case, the default value is the original element (`i`).

You can use this function as follows:

```python
rest=[5, 7, 11, 4]
b=[21, 22, 33, 31, 23, 15, 19, 13, 6]
last=[33, 19, 40, 21, 31, 22, 6, 15, 13, 23]

print(ReplaceElementsByIndex(rest, b, last))
```

This will output:

```python
[11, 19, 40, 5, 4, 7, 6, 15, 13, 23]
```