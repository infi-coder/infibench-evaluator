In Rust, you cannot create an empty `TcpStream` object directly. Instead, you can use `Option<TcpStream>` for the `conn` field in the `FistClient` struct. This allows you to set `conn` to `None` initially and then set it to `Some(TcpStream)` when you establish a connection.

Here is how you can modify your code:

```rust
use std::net::TcpStream;

pub struct FistClient {
    addr: String,
    conn: Option<TcpStream>,
}

impl FistClient {
    pub fn new(ip: &str, port: &str) -> Self {
        FistClient {
            addr: String::from(ip) + ":" + &String::from(port),
            conn: None, // set conn to None initially
        }
    }

    pub fn connect(&mut self) {
        let res = TcpStream::connect(&self.addr);
        match res {
            Ok(c) => self.conn = Some(c), // set conn to Some(TcpStream) when connection is established
            Err(_) => panic!(),
        }
    }
}
```

In this code, `conn` is an `Option<TcpStream>`. This means it can either be `Some(TcpStream)` or `None`. Initially, it is set to `None` in the `new` method. When the `connect` method is called and the connection is successful, `conn` is set to `Some(TcpStream)`.

Remember to handle the `None` case when you use `self.conn` elsewhere in your code. You can use the `unwrap` method to get the `TcpStream` object from `Some(TcpStream)`, but it will panic if `conn` is `None`. To avoid this, you can use the `match` statement or `if let` statement to check if `conn` is `Some(TcpStream)` before you use it.