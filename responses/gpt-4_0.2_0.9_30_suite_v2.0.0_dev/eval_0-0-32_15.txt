You can use the `react-intersection-observer` npm package to achieve this. This package allows you to track the visibility of a functional component, and it uses the Intersection Observer API.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use it in your component:

```jsx
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the event to be triggered only once
  });

  return (
    <div id="parent">
      {data.map(item => {
        const [ref, inView] = useInView({
          triggerOnce: false,
        });

        return (
          <div ref={ref} id={item.id}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {data.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this example, `useInView` is a hook that returns a `ref` and a boolean `inView`. You can attach the `ref` to any DOM element, and `inView` will be `true` if the element is in the viewport and `false` otherwise.

Please note that the Intersection Observer API is not supported in all browsers. You can check the current browser compatibility on the [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#browser_compatibility). If you need to support a browser that doesn't have native support, you can use a polyfill. The `react-intersection-observer` library recommends the [w3c Intersection Observer polyfill](https://github.com/w3c/IntersectionObserver/tree/master/polyfill).