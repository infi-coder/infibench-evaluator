Sure, you can achieve this by using the `numpy.amax` function along with the appropriate axis. Here is the function you asked for:

```python
import numpy as np

def getMax(matrix):
    # Convert the input to a numpy array (in case it's a list)
    matrix = np.array(matrix)
    
    # Get the max value of the third column for each 2D array
    max_values = np.amax(matrix[:,:,2], axis=1)
    
    # Reshape the result to a 2D array
    max_values = max_values.reshape(-1, 1)
    
    return max_values
```

This function works by first converting the input to a numpy array (if it's not already), then using `numpy.amax` to find the maximum value along the third column (index 2) for each 2D array in the 3D array. The `axis=1` argument tells `numpy.amax` to operate along the second axis (rows) of each 2D array.

Finally, `reshape(-1, 1)` is used to convert the 1D array of max values to a 2D array with one column, as you requested. The `-1` in `reshape` means "infer this dimension from the length of the array".