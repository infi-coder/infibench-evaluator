Sure, here is a generator function that should do what you need:

```javascript
function* iterLeafNodes(strHTML, format=[]) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(strHTML, 'text/html');
  const body = doc.body;

  function* traverse(node, format) {
    if (node.nodeType === Node.TEXT_NODE) {
      if (node.textContent.trim() !== '') {
        yield { text: node.textContent, format };
      }
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      const newFormat = [...format];
      if (node.tagName.toLowerCase() !== 'p') {
        newFormat.push(node.tagName.toLowerCase());
      }
      for (const child of node.childNodes) {
        yield* traverse(child, newFormat);
      }
    }
  }

  for (const child of body.childNodes) {
    yield* traverse(child, format);
  }
}
```

This function uses a recursive approach to traverse the DOM tree, yielding an object for each text node it encounters. The `format` array is updated as the function descends into nested tags.