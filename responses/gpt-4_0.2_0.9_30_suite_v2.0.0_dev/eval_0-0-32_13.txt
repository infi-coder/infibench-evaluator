You can use the `react-intersection-observer` npm package to check if an element is in the viewport. The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from `react-intersection-observer` to track the visibility of each div. Here is an example:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = ({ data }) => {
    const [ref, inView] = useInView({
        triggerOnce: false, // Change this to true if you want the event to trigger only once
    });

    return (
        <div id="parent">
            {data.map((item) => {
                const [ref, inView] = useInView({
                    triggerOnce: false,
                });

                return (
                    <div ref={ref} id={item.id}>
                        {inView ? 'In viewport' : 'Not in viewport'}
                    </div>
                );
            })}
        </div>
    );
};

export default MyComponent;
```

In this example, `useInView` returns a `ref` that you can attach to the divs. When a div is in the viewport, `inView` will be `true`.

Please note that the Intersection Observer API is not supported in all browsers, so you might want to add a polyfill for it. You can use `intersection-observer` npm package for this:

```bash
npm install intersection-observer
```

And then import it in your main application file:

```javascript
import 'intersection-observer';
```

This will ensure that the Intersection Observer API is available in all browsers.