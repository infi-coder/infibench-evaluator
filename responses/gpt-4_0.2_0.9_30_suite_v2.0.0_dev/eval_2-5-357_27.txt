Yes, you're correct. Starting from Spring 4.3, if a class, which is annotated with `@Component` or `@Service`, has a single constructor, the `@Autowired` annotation can be omitted, Spring will use that constructor automatically for dependency injection.

The reason people still use `@Autowired` on constructors could be due to:

1. **Backward compatibility**: Older versions of Spring required `@Autowired` for dependency injection. So, for code that needs to run on older versions of Spring, `@Autowired` is still necessary.

2. **Explicitness**: Using `@Autowired` makes it clear that Spring is managing the dependency injection. This can make the code easier to understand for people who are not familiar with the newer features of Spring.

3. **Multiple constructors**: If your class has more than one constructor and you want Spring to use one of them for dependency injection, you need to use `@Autowired` to tell Spring which one to use.