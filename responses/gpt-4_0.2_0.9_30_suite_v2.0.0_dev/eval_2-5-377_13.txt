The problem you're facing is due to the fact that you're trying to format a `LocalDate` object, which only contains date information (year, month, day), into a format that includes time information (hour, minute, second). 

To solve this, you should use `ZonedDateTime` or `LocalDateTime` instead of `LocalDate`. Here's how you can do it:

```java
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.ThreadLocalRandom;

public class Main {
    public static void main(String[] args) {
        System.out.println(generateRandomDateAndTimeInString());
    }

    public static String generateRandomDateAndTimeInString() {
        long minDay = ZonedDateTime.now().minusYears(70).toEpochSecond();
        long maxDay = ZonedDateTime.now().toEpochSecond();
        long randomDay = ThreadLocalRandom.current().nextLong(minDay, maxDay);

        ZonedDateTime randomDate = ZonedDateTime.ofInstant(Instant.ofEpochSecond(randomDay), ZoneOffset.UTC);
        return formatDate(randomDate);
    }

    public static String formatDate(ZonedDateTime date) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss'Z'");
        return date.format(formatter);
    }
}
```

In this code, we first calculate the minimum and maximum possible days in seconds. Then we generate a random day in this range. We convert this random day (in seconds) to a `ZonedDateTime` object. Finally, we format this `ZonedDateTime` object into the desired format.

Note: The `ThreadLocalRandom.current().nextLong(minDay, maxDay)` generates a random long between `minDay` and `maxDay`.