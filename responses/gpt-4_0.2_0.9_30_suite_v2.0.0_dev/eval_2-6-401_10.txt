You can create a factory that will generate `ServiceBusSender` instances for different queues. Here's an example of how you can do this:

1. Create a factory interface:

```c#
public interface IServiceBusClientFactory
{
    ServiceBusSender CreateSender(string queueName);
}
```

2. Implement the factory:

```c#
public class ServiceBusClientFactory : IServiceBusClientFactory
{
    private readonly ServiceBusClient _serviceBusClient;

    public ServiceBusClientFactory(string connectionString)
    {
        _serviceBusClient = new ServiceBusClient(connectionString, new ServiceBusClientOptions
        {
            TransportType = ServiceBusTransportType.AmqpWebSockets
        });
    }

    public ServiceBusSender CreateSender(string queueName)
    {
        return _serviceBusClient.CreateSender(queueName);
    }
}
```

3. Register the factory in your DI container:

```c#
_services.AddSingleton<IServiceBusClientFactory>(provider =>
{
    var serviceBusConfiguration = provider.GetRequiredService<IOptions<UserEventConsumerSetting>>().Value;
    return new ServiceBusClientFactory(serviceBusConfiguration.ServiceBusConnectionString);
});
```

4. Use the factory to create `ServiceBusSender` instances:

```c#
public class CarReservationMessagingService
{
    private readonly ServiceBusSender _serviceBusSender;

    public CarReservationMessagingService(IServiceBusClientFactory serviceBusClientFactory)
    {
        _serviceBusSender = serviceBusClientFactory.CreateSender("yourQueueName");
    }

    // ...
}
```

In this way, you can inject `IServiceBusClientFactory` wherever you need and create `ServiceBusSender` for any queue you want.