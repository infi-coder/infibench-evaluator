The issue is that you're using `@Binding` in `ContentView` but you're not providing a source of truth for `isSelected`. `@Binding` is a way to create a two-way connection between a variable and a source of truth. In your case, you're not providing a source of truth.

You should use `@State` in the parent view and pass it as `@Binding` to the child view. Here's an example:

```swift
import SwiftUI

struct ParentView: View {
    @State private var isSelected: Bool = false

    var body: some View {
        ContentView(isSelected: $isSelected)
    }
}

struct ContentView: View {
    @Binding var isSelected: Bool

    var body: some View {
        Button(action: {
            self.isSelected.toggle()
        }) {
            Text(isSelected ? "Selected" : "Not Selected")
        }
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ParentView()
    }
}
```

In this example, `ParentView` is the source of truth for `isSelected`. It passes `isSelected` to `ContentView` as a `@Binding`, so when `isSelected` changes in `ContentView`, it also changes in `ParentView`.