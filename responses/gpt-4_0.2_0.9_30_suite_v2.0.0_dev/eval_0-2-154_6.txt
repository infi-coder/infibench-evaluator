Sure, here's a generator function that should do the trick:

```javascript
function* iterLeafNodes(strHTML, format=[]) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(strHTML, 'text/html');
  const body = doc.body;

  function* traverse(node, format) {
    if (node.nodeType === Node.TEXT_NODE) {
      if (node.textContent.trim() !== '') {
        yield { text: node.textContent, format };
      }
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      for (const child of node.childNodes) {
        yield* traverse(child, [...format, node.tagName.toLowerCase()]);
      }
    }
  }

  for (const child of body.childNodes) {
    yield* traverse(child, format);
  }
}
```

This function uses a recursive approach to traverse the DOM tree. When it encounters a text node, it yields an object with the text and the current format. When it encounters an element node, it recursively traverses its child nodes, adding the tag name of the current node to the format.