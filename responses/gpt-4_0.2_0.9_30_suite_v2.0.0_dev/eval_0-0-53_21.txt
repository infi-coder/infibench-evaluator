The issue here is that you're trying to use inline JavaScript in a React component, which doesn't work the same way it does in regular HTML. In React, you should use event handlers to handle events like clicks. 

Here's the revised version of your code:

```javascript
import React, { Component } from 'react'

class Main extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      imageURL: '',
    };

    this.handleUploadImage = this.handleUploadImage.bind(this);
  }

  handleUploadImage(ev) {
    ev.preventDefault();

    const data = new FormData();
    data.append('file', this.uploadInput.files[0]);
    data.append('filename', this.fileName.value);

    fetch('http://localhost:8000/upload', {
      method: 'POST',
      body: data,
    }).then((response) => {
      response.json().then((body) => {
        this.setState({ imageURL: `http://localhost:8000/${body.file}` });
      });
    });

    alert("Your file is being uploaded!");
  }

  render() {
    return (
      <form onSubmit={this.handleUploadImage}>
        <div>
          <input ref={(ref) => { this.uploadInput = ref; }} type="file" />
        </div>
        <div>
          <input ref={(ref) => { this.fileName = ref; }} type="text" placeholder="Enter the desired name of file" />
        </div>
        <br />
        <div>
          <button type="submit">Upload</button>
        </div>
        <img src={this.state.imageURL} alt="img" />
      </form>
    );
  }
}

export default Main;
```

In this revised version, I've moved the alert into the `handleUploadImage` function, which is called when the form is submitted. This will show the alert when the user clicks the "Upload" button. Also, I've removed the `onclick` attribute from the button and replaced it with `type="submit"`, which will trigger the form's `onSubmit` event.