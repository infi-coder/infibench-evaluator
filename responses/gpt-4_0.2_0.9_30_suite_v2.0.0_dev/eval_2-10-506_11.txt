You can use the `iter()` method to create an iterator over the vector, and then use the `min()` method to find the minimum value. Here is how you can do it:

```rust
let v = vec![5, 6, 8, 4, 2, 7];
let min = v.iter().min();

match min {
    Some(min) => println!("The minimum value is {}", min),
    None => println!("The vector is empty"),
}
```

In this code, `v.iter().min()` returns an `Option<&i32>`. If the vector is empty, `min()` returns `None`. If the vector is not empty, `min()` returns `Some(&min_value)`. The `match` statement is used to handle both cases.

Please note that the `min()` method returns a reference to the minimum value, not the value itself. If you want to get the value, you can dereference it like this:

```rust
let min = *v.iter().min().unwrap();
```

But be careful: calling `unwrap()` on a `None` value will cause your program to panic. Make sure the vector is not empty before you call `unwrap()`.