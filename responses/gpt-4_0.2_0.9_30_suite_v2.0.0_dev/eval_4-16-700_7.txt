You can optimize your task by using `awk` which is a powerful text processing tool in Unix/Linux. Here is an optimized version of your script:

```bash
awk -F'=' '
    /^name/ { name=$2; next }
    /^value/ && name { print name "=" $2; name="" }
' input.txt > output.txt
```

This script works as follows:

- `-F'='` sets the field separator to `=`.
- `/^name/ { name=$2; next }` if the line starts with `name`, it saves the value and skips to the next line.
- `/^value/ && name { print name "=" $2; name="" }` if the line starts with `value` and a name has been saved, it prints the name and value, and then clears the name.