You can use the `react-intersection-observer` npm package to detect when an element is in the viewport. This package uses the Intersection Observer API which provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package to track the visibility of each div. Here is an example:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = ({ data }) => {
  return (
    <div id="parent">
      {data.map(item => {
        const { ref, inView } = useInView({
          triggerOnce: false, // Change to true if you want to trigger only once
        });

        return (
          <div id={item.id} ref={ref}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {item.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this example, `useInView` returns an object containing `ref` and `inView`. `ref` is a function that you can pass to the `ref` prop of the div. `inView` is a boolean indicating whether the div is in the viewport or not.

Please note that the Intersection Observer API is not supported in all browsers. You may need to use a polyfill for full compatibility.