Yes, there are a few more idiomatic ways to express this in Rust. Here are some alternatives:

1. Using `if let` with a condition:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = foo {
        if foo_val < 5 {
            // Do nothing
        } else {
            foo.replace(5);
        }
    } else {
        foo.replace(5);
    }
}
```

2. Using `map_or`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    foo = foo.map_or(Some(5), |foo_val| if foo_val < 5 { Some(foo_val) } else { Some(5) });
}
```

3. Using `match` with a condition (similar to your original code but a bit more idiomatic):

```rust
fn main() {
    let mut foo: Option<u8> = None;
    match foo {
        Some(foo_val) if foo_val >= 5 => {},
        _ => { foo.replace(5); }
    }
}
```

4. Using `if let` with `else`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    if let Some(foo_val) = &foo {
        if *foo_val >= 5 {
            // Do nothing
        } else {
            foo.replace(5);
        }
    } else {
        foo.replace(5);
    }
}
```

5. Using `unwrap_or`:

```rust
fn main() {
    let mut foo: Option<u8> = None;
    let _ = foo.unwrap_or(5);
}
```

Note: The `unwrap_or` method returns the contained value or a default, but it doesn't replace the `None` value in the `Option`. If you need to replace the `None` value in the `Option`, you should use one of the other methods.