Yes, Go modules (vgo) does support this. You can take advantage of Docker's layer caching by separating the downloading of dependencies and building of your application into different steps in your Dockerfile.

Here's an example Dockerfile:

```Dockerfile
# Start from the latest golang base image
FROM golang:1.11

# Add Maintainer Info
LABEL maintainer="Your Name <your-email@example.com>"

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source from the current directory to the Working Directory inside the container
COPY . .

# Build the Go app
RUN go build -o main .

# Expose port 8080 to the outside world
EXPOSE 8080

# Command to run the executable
CMD ["./main"]
```

In this Dockerfile, the `go.mod` and `go.sum` files are copied into the Docker image and `go mod download` is run. This will download all the dependencies specified in the `go.mod` and `go.sum` files. Then, the rest of the source code is copied and the application is built. 

Because Docker caches the results of each step in the Dockerfile, as long as the `go.mod` and `go.sum` files don't change, Docker will use the cached results of the `go mod download` step, making subsequent builds faster.