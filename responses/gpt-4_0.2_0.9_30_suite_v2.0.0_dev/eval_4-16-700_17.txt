You can optimize your task by using `awk` which is a powerful text processing tool. Here is a more efficient solution:

```bash
awk -F'=' '/^name/{n=$2} /^value/{print n"="$2}' input.txt > output.txt
```

This `awk` command works as follows:

- `-F'='` sets the field separator to `=`.
- `/^name/{n=$2}` if the line starts with `name`, it saves the second field (after `=`) to the variable `n`.
- `/^value/{print n"="$2}` if the line starts with `value`, it prints the previously saved name and the current value.
- `input.txt > output.txt` reads from `input.txt` and writes to `output.txt`.

This solution is much faster because it reads the file line by line and doesn't spawn new processes for `grep` and `sed` for each line.